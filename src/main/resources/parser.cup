/*
  To generator parser, use:

  java -jar src/main/resources/java-cup-11b.jar \
       -parser CupParser -symbols CupSymbols -destdir src/main/java/c4/ast/ \
       src/main/resources/parser.cup
*/
package c4.ast;

import java.math.BigInteger;
import java_cup.runtime.*;

import c4.io.*;
import c4.util.Loc;
import c4.util.Located;

parser code {: /* not needed */ :}

init with {: /* no need to initialize */ :};
scan with {: return getScanner().next_token(); :};

// literals
terminal Located<TokId>         ID              ;
terminal Located<TokInteger>    INTEGER_LIT     ;
terminal Located<TokFloat>      FLOAT_LIT       ;
terminal Located<TokDouble>     DOUBLE_LIT      ;
terminal Located<TokLongDouble> LONG_DOUBLE_LIT ;
terminal Located<TokChar>       CHAR_LIT        ;
terminal Located<TokWideChar>   WIDE_CHAR_LIT   ;
terminal Located<TokStr>        STR_LIT         ;
terminal Located<TokWideStr>    WIDE_STR_LIT    ;

// keywords
terminal Loc    AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, DOUBLE,
                ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER,
                RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF,
                UNION, UNSIGNED, VOID, VOLATILE, WHILE;

// op/sym       [       ]       (       )       {       }
terminal Loc    LSBRKT, RSBRKT, LPAREN, RPAREN, LBRACE, RBRACE,
//              .    ,      ;          ...       ->   ++   --   &      *
                DOT, COMMA, SEMICOLON, ELLIPSIS, PTR, INC, DEC, B_AND, STAR,
//              +    -    ~      !      /    %    <<      >>      <   >
                ADD, SUB, TILDE, B_NOT, DIV, MOD, LSHIFT, RSHIFT, LE, GT,
//              <=   >=   ==  !=   ^    |     &&     ||    ?      :
                LEQ, GEQ, EQ, NEQ, XOR, B_OR, L_AND, L_OR, QMARK, COLON,
//              =       *=          /=          %=          +=
                ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN,
//              -=          <<=            >>=            &=
                SUB_ASSIGN, LSHIFT_ASSIGN, RSHIFT_ASSIGN, B_AND_ASSIGN,
//              ^=          |=
                XOR_ASSIGN, B_OR_ASSIGN;

non terminal expr;
// non terminal            expr_list;
// non terminal BigInteger expr;

// precedence left ADD;

// expr_list ::= expr_list expr:e SEMI     {: System.out.println(e); :}
//             | expr:e SEMI               {: System.out.println(e); :}
//             ;
//
// expr      ::= expr:e1 PLUS expr:e2      {: RESULT = e1.add(e2); :}
//             | NUMBER:n                  {: RESULT = n; :}
//             ;
expr ::= ID;
