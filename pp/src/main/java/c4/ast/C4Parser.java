
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package c4.ast;

import java.math.BigInteger;
import scala.collection.Seq;
import scala.Tuple2;
import scala.util.Either;
import scala.Option;
import java_cup.runtime.*;
import c4.io.*;
import c4.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class C4Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return C4Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public C4Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public C4Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public C4Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\337\000\002\002\004\000\002\013\004\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\077\002" +
    "\000\002\015\007\000\002\100\002\000\002\015\006\000" +
    "\002\101\002\000\002\015\006\000\002\102\002\000\002" +
    "\015\005\000\002\017\005\000\002\017\004\000\002\026" +
    "\004\000\002\026\003\000\002\026\004\000\002\026\003" +
    "\000\002\026\004\000\002\026\003\000\002\020\003\000" +
    "\002\020\005\000\002\021\003\000\002\021\005\000\002" +
    "\030\004\000\002\030\003\000\002\031\003\000\002\031" +
    "\005\000\002\031\006\000\002\031\005\000\002\031\006" +
    "\000\002\031\006\000\002\031\005\000\002\024\005\000" +
    "\002\024\004\000\002\024\004\000\002\024\003\000\002" +
    "\045\004\000\002\045\003\000\002\034\003\000\002\034" +
    "\005\000\002\035\003\000\002\035\005\000\002\036\004" +
    "\000\002\036\004\000\002\036\003\000\002\025\005\000" +
    "\002\025\003\000\002\012\006\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\016\003\000\002\016" +
    "\004\000\002\003\003\000\002\003\004\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\051\007\000\002\051\006\000\002\051\004\000\002" +
    "\051\007\000\002\051\006\000\002\051\004\000\002\041" +
    "\003\000\002\041\004\000\002\042\005\000\002\046\004" +
    "\000\002\046\003\000\002\046\004\000\002\046\003\000" +
    "\002\043\005\000\002\043\003\000\002\044\003\000\002" +
    "\044\005\000\002\044\004\000\002\050\007\000\002\050" +
    "\006\000\002\050\004\000\002\037\003\000\002\037\005" +
    "\000\002\040\003\000\002\040\005\000\002\052\003\000" +
    "\002\052\003\000\002\023\003\000\002\023\005\000\002" +
    "\023\006\000\002\022\003\000\002\022\005\000\002\002" +
    "\004\000\002\002\003\000\002\032\003\000\002\032\004" +
    "\000\002\032\003\000\002\033\005\000\002\033\006\000" +
    "\002\033\005\000\002\033\005\000\002\033\004\000\002" +
    "\033\006\000\002\033\005\000\002\033\005\000\002\033" +
    "\004\000\002\004\003\000\002\103\002\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\005\006\000\002" +
    "\005\005\000\002\011\004\000\002\011\003\000\002\006" +
    "\007\000\002\006\011\000\002\006\007\000\002\007\007" +
    "\000\002\007\011\000\002\007\011\000\002\007\010\000" +
    "\002\010\005\000\002\010\004\000\002\010\004\000\002" +
    "\010\005\000\002\010\004\000\002\053\003\000\002\053" +
    "\005\000\002\054\003\000\002\055\003\000\002\055\005" +
    "\000\002\056\003\000\002\056\007\000\002\057\003\000" +
    "\002\057\005\000\002\060\003\000\002\060\005\000\002" +
    "\061\003\000\002\061\005\000\002\062\003\000\002\062" +
    "\005\000\002\063\003\000\002\063\005\000\002\064\003" +
    "\000\002\064\005\000\002\064\005\000\002\065\003\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\066\003\000\002\066\005\000\002\066" +
    "\005\000\002\067\003\000\002\067\005\000\002\067\005" +
    "\000\002\070\003\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\071\003\000" +
    "\002\071\004\000\002\071\004\000\002\071\004\000\002" +
    "\071\004\000\002\071\004\000\002\071\004\000\002\071" +
    "\004\000\002\071\004\000\002\071\004\000\002\071\006" +
    "\000\002\072\003\000\002\072\006\000\002\072\006\000" +
    "\002\072\005\000\002\072\005\000\002\072\005\000\002" +
    "\072\004\000\002\072\004\000\002\075\003\000\002\075" +
    "\005\000\002\073\003\000\002\073\006\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\060\004\026\015\022\016\031\021\010\022" +
    "\007\026\013\030\037\031\024\032\041\036\016\037\043" +
    "\040\017\042\005\043\036\045\021\046\046\050\025\051" +
    "\034\052\030\053\032\054\044\060\014\074\020\001\002" +
    "\000\012\004\026\060\014\066\u010c\074\020\001\002\000" +
    "\072\004\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\026\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\036\uffc1\037\uffc1\040\uffc1\042" +
    "\uffc1\043\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\056\uffc1\060\uffc1\061\uffc1\065\uffc1\066" +
    "\uffc1\074\uffc1\120\uffc1\001\002\000\072\004\uffb9\015\uffb9" +
    "\016\uffb9\021\uffb9\022\uffb9\026\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\046\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\056" +
    "\uffb9\060\uffb9\061\uffb9\065\uffb9\066\uffb9\074\uffb9\120\uffb9" +
    "\001\002\000\072\004\uff9e\015\uff9e\016\uff9e\021\uff9e\022" +
    "\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\042\uff9e\043\uff9e\045\uff9e\046\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e\060\uff9e\061\uff9e" +
    "\065\uff9e\066\uff9e\074\uff9e\120\uff9e\001\002\000\072\004" +
    "\uffc2\015\uffc2\016\uffc2\021\uffc2\022\uffc2\026\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\043" +
    "\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\056\uffc2\060\uffc2\061\uffc2\065\uffc2\066\uffc2\074" +
    "\uffc2\120\uffc2\001\002\000\072\004\uffba\015\uffba\016\uffba" +
    "\021\uffba\022\uffba\026\uffba\030\uffba\031\uffba\032\uffba\036" +
    "\uffba\037\uffba\040\uffba\042\uffba\043\uffba\045\uffba\046\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\056\uffba\060" +
    "\uffba\061\uffba\065\uffba\066\uffba\074\uffba\120\uffba\001\002" +
    "\000\072\015\uffe7\016\uffe7\021\uffe7\022\uffe7\026\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\056\306\060\307\061\uffe7\062\uffe7\065\uffe7" +
    "\066\uffe7\120\uffe7\121\uffe7\001\002\000\072\004\uffbd\015" +
    "\uffbd\016\uffbd\021\uffbd\022\uffbd\026\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\045" +
    "\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\056\uffbd\060\uffbd\061\uffbd\065\uffbd\066\uffbd\074\uffbd\120" +
    "\uffbd\001\002\000\010\004\026\060\014\074\020\001\002" +
    "\000\062\002\ufffe\004\ufffe\015\ufffe\016\ufffe\021\ufffe\022" +
    "\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\042\ufffe\043\ufffe\045\ufffe\046\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\060\ufffe\074\ufffe\001\002" +
    "\000\072\004\uffc0\015\uffc0\016\uffc0\021\uffc0\022\uffc0\026" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\042\uffc0\043\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\056\uffc0\060\uffc0\061\uffc0\065\uffc0" +
    "\066\uffc0\074\uffc0\120\uffc0\001\002\000\070\004\uffc4\015" +
    "\uffc4\016\uffc4\021\uffc4\022\uffc4\026\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\045" +
    "\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\056\uffc4\060\uffc4\061\uffc4\065\uffc4\066\uffc4\074\uffc4\001" +
    "\002\000\022\004\uffdc\022\007\054\044\056\uffdc\060\uffdc" +
    "\061\uffdc\065\uffdc\074\020\001\002\000\070\004\uffc6\015" +
    "\uffc6\016\uffc6\021\uffc6\022\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\045" +
    "\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\056\uffc6\060\uffc6\061\uffc6\065\uffc6\066\uffc6\074\uffc6\001" +
    "\002\000\072\004\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8" +
    "\026\uffb8\030\uffb8\031\uffb8\032\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\042\uffb8\043\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\056\uffb8\060\uffb8\061\uffb8\065" +
    "\uffb8\066\uffb8\074\uffb8\120\uffb8\001\002\000\006\004\026" +
    "\060\014\001\002\000\070\004\uffc7\015\uffc7\016\uffc7\021" +
    "\uffc7\022\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7\060\uffc7" +
    "\061\uffc7\065\uffc7\066\uffc7\074\uffc7\001\002\000\070\004" +
    "\uffc8\015\uffc8\016\uffc8\021\uffc8\022\uffc8\026\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\043" +
    "\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\056\uffc8\060\uffc8\061\uffc8\065\uffc8\066\uffc8\074" +
    "\uffc8\001\002\000\072\015\uffe6\016\uffe6\021\uffe6\022\uffe6" +
    "\026\uffe6\030\uffe6\031\uffe6\032\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\042\uffe6\043\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\056\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\065\uffe6\066\uffe6\120\uffe6\121\uffe6\001\002\000\070" +
    "\004\uffef\015\022\016\031\021\010\022\007\026\013\030" +
    "\037\031\024\032\041\036\016\037\043\040\017\042\005" +
    "\043\036\045\021\046\046\050\025\051\034\052\030\053" +
    "\032\054\044\056\uffef\060\uffef\061\uffef\065\uffef\066\uffef" +
    "\074\uffef\001\002\000\072\004\uffbb\015\uffbb\016\uffbb\021" +
    "\uffbb\022\uffbb\026\uffbb\030\uffbb\031\uffbb\032\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\056\uffbb\060\uffbb" +
    "\061\uffbb\065\uffbb\066\uffbb\074\uffbb\120\uffbb\001\002\000" +
    "\070\004\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5\026\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\036\uffc5\037\uffc5\040\uffc5\042" +
    "\uffc5\043\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\056\uffc5\060\uffc5\061\uffc5\065\uffc5\066" +
    "\uffc5\074\uffc5\001\002\000\072\004\uffc3\015\uffc3\016\uffc3" +
    "\021\uffc3\022\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\056\uffc3\060" +
    "\uffc3\061\uffc3\065\uffc3\066\uffc3\074\uffc3\120\uffc3\001\002" +
    "\000\054\015\022\016\031\021\010\022\007\026\013\030" +
    "\037\031\024\032\041\036\016\037\043\040\017\042\005" +
    "\043\036\045\021\046\046\050\025\051\034\052\030\053" +
    "\032\054\044\062\ufff6\001\002\000\006\004\u0100\062\u0101" +
    "\001\002\000\070\004\uffed\015\022\016\031\021\010\022" +
    "\007\026\013\030\037\031\024\032\041\036\016\037\043" +
    "\040\017\042\005\043\036\045\021\046\046\050\025\051" +
    "\034\052\030\053\032\054\044\056\uffed\060\uffed\061\uffed" +
    "\065\uffed\066\uffed\074\uffed\001\002\000\072\004\uffbc\015" +
    "\uffbc\016\uffbc\021\uffbc\022\uffbc\026\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc\045" +
    "\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\056\uffbc\060\uffbc\061\uffbc\065\uffbc\066\uffbc\074\uffbc\120" +
    "\uffbc\001\002\000\006\004\362\062\363\001\002\000\062" +
    "\002\uffff\004\uffff\015\uffff\016\uffff\021\uffff\022\uffff\026" +
    "\uffff\030\uffff\031\uffff\032\uffff\036\uffff\037\uffff\040\uffff" +
    "\042\uffff\043\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\054\uffff\060\uffff\074\uffff\001\002\000\072" +
    "\004\uffbe\015\uffbe\016\uffbe\021\uffbe\022\uffbe\026\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe" +
    "\043\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\056\uffbe\060\uffbe\061\uffbe\065\uffbe\066\uffbe" +
    "\074\uffbe\120\uffbe\001\002\000\062\002\360\004\026\015" +
    "\022\016\031\021\010\022\007\026\013\030\037\031\024" +
    "\032\041\036\016\037\043\040\017\042\005\043\036\045" +
    "\021\046\046\050\025\051\034\052\030\053\032\054\044" +
    "\060\014\074\020\001\002\000\072\004\uffbf\015\uffbf\016" +
    "\uffbf\021\uffbf\022\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\042\uffbf\043\uffbf\045\uffbf\046" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\056\uffbf" +
    "\060\uffbf\061\uffbf\065\uffbf\066\uffbf\074\uffbf\120\uffbf\001" +
    "\002\000\072\004\uff9d\015\uff9d\016\uff9d\021\uff9d\022\uff9d" +
    "\026\uff9d\030\uff9d\031\uff9d\032\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\042\uff9d\043\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\056\uff9d\060\uff9d\061\uff9d\065" +
    "\uff9d\066\uff9d\074\uff9d\120\uff9d\001\002\000\062\002\ufffd" +
    "\004\ufffd\015\ufffd\016\ufffd\021\ufffd\022\ufffd\026\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\036\ufffd\037\ufffd\040\ufffd\042\ufffd" +
    "\043\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\060\ufffd\074\ufffd\001\002\000\006\004\051" +
    "\062\052\001\002\000\070\004\ufff1\015\022\016\031\021" +
    "\010\022\007\026\013\030\037\031\024\032\041\036\016" +
    "\037\043\040\017\042\005\043\036\045\021\046\046\050" +
    "\025\051\034\052\030\053\032\054\044\056\ufff1\060\ufff1" +
    "\061\ufff1\065\ufff1\066\ufff1\074\ufff1\001\002\000\020\004" +
    "\ufff2\056\ufff2\060\ufff2\061\ufff2\065\ufff2\066\ufff2\074\ufff2" +
    "\001\002\000\074\004\uffb5\015\uffb5\016\uffb5\021\uffb5\022" +
    "\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\042\uffb5\043\uffb5\045\uffb5\046\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\056\uffb5\060\uffb5\061\uffb5" +
    "\062\355\065\uffb5\066\uffb5\074\uffb5\120\uffb5\001\002\000" +
    "\040\015\022\021\010\022\007\026\013\030\037\032\041" +
    "\036\016\037\043\042\005\043\036\046\046\051\034\052" +
    "\030\053\032\054\044\001\002\000\054\004\uffad\015\022" +
    "\021\010\022\007\026\013\030\037\032\041\036\016\037" +
    "\043\042\005\043\036\046\046\051\034\052\030\053\032" +
    "\054\044\056\uffad\060\uffad\061\uffad\074\uffad\120\uffad\001" +
    "\002\000\042\015\022\021\010\022\007\026\013\030\037" +
    "\032\041\036\016\037\043\042\005\043\036\046\046\051" +
    "\034\052\030\053\032\054\044\063\352\001\002\000\042" +
    "\015\uffb1\021\uffb1\022\uffb1\026\uffb1\030\uffb1\032\uffb1\036" +
    "\uffb1\037\uffb1\042\uffb1\043\uffb1\046\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\063\uffb1\001\002\000\054\004\uffab\015" +
    "\022\021\010\022\007\026\013\030\037\032\041\036\016" +
    "\037\043\042\005\043\036\046\046\051\034\052\030\053" +
    "\032\054\044\056\uffab\060\uffab\061\uffab\074\uffab\120\uffab" +
    "\001\002\000\012\004\026\060\014\074\020\120\060\001" +
    "\002\000\050\004\076\005\115\006\123\007\103\010\113" +
    "\011\125\012\124\013\116\014\127\044\065\060\074\071" +
    "\104\072\117\073\126\074\070\075\114\076\101\077\100" +
    "\100\071\001\002\000\006\065\uffa9\066\uffa9\001\002\000" +
    "\006\065\345\066\346\001\002\000\010\065\uffa8\066\uffa8" +
    "\120\064\001\002\000\050\004\076\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\044\065" +
    "\060\074\071\104\072\117\073\126\074\070\075\114\076" +
    "\101\077\100\100\071\001\002\000\050\004\076\005\115" +
    "\006\123\007\103\010\113\011\125\012\124\013\116\014" +
    "\127\044\065\060\342\071\104\072\117\073\126\074\070" +
    "\075\114\076\101\077\100\100\071\001\002\000\126\056" +
    "\uff38\057\uff38\060\uff38\061\uff38\063\uff38\064\uff38\065\uff38" +
    "\066\uff38\070\uff38\071\uff38\072\uff38\073\uff38\074\uff38\075" +
    "\uff38\076\uff38\101\uff38\102\uff38\103\uff38\104\uff38\105\uff38" +
    "\106\uff38\107\uff38\110\uff38\111\uff38\112\uff38\113\uff38\114" +
    "\uff38\115\uff38\116\uff38\117\uff38\120\uff38\121\uff38\122\uff38" +
    "\123\uff38\124\uff38\125\uff38\126\uff38\127\uff38\130\uff38\131" +
    "\uff38\132\uff38\133\uff38\001\002\000\064\057\uff52\061\uff52" +
    "\063\uff52\065\uff52\066\uff52\073\uff52\074\uff52\075\uff52\076" +
    "\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105\uff52\106\uff52" +
    "\107\uff52\110\uff52\111\uff52\112\uff52\113\uff52\114\uff52\115" +
    "\uff52\116\uff52\117\uff52\120\uff52\001\002\000\050\004\076" +
    "\005\115\006\123\007\103\010\113\011\125\012\124\013" +
    "\116\014\127\044\065\060\074\071\104\072\117\073\126" +
    "\074\070\075\114\076\101\077\100\100\071\001\002\000" +
    "\050\004\076\005\115\006\123\007\103\010\113\011\125" +
    "\012\124\013\116\014\127\044\065\060\074\071\104\072" +
    "\117\073\126\074\070\075\114\076\101\077\100\100\071" +
    "\001\002\000\112\057\uff2e\061\uff2e\063\uff2e\065\uff2e\066" +
    "\uff2e\073\uff2e\074\uff2e\075\uff2e\076\uff2e\101\uff2e\102\uff2e" +
    "\103\uff2e\104\uff2e\105\uff2e\106\uff2e\107\uff2e\110\uff2e\111" +
    "\uff2e\112\uff2e\113\uff2e\114\uff2e\115\uff2e\116\uff2e\117\uff2e" +
    "\120\uff2e\121\uff2e\122\uff2e\123\uff2e\124\uff2e\125\uff2e\126" +
    "\uff2e\127\uff2e\130\uff2e\131\uff2e\132\uff2e\133\uff2e\001\002" +
    "\000\032\057\uff64\061\uff64\063\uff64\065\uff64\066\uff64\073" +
    "\175\113\uff64\114\uff64\115\uff64\116\uff64\117\uff64\120\uff64" +
    "\001\002\000\106\004\076\005\115\006\123\007\103\010" +
    "\113\011\125\012\124\013\116\014\127\015\022\021\010" +
    "\022\007\026\013\030\037\032\041\036\016\037\043\042" +
    "\005\043\036\044\065\046\046\051\034\052\030\053\032" +
    "\054\044\060\074\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\014\057\uff6f" +
    "\063\uff6f\065\uff6f\066\uff6f\120\uff6f\001\002\000\126\056" +
    "\uff2c\057\uff2c\060\uff2c\061\uff2c\063\uff2c\064\uff2c\065\uff2c" +
    "\066\uff2c\070\uff2c\071\uff2c\072\uff2c\073\uff2c\074\uff2c\075" +
    "\uff2c\076\uff2c\101\uff2c\102\uff2c\103\uff2c\104\uff2c\105\uff2c" +
    "\106\uff2c\107\uff2c\110\uff2c\111\uff2c\112\uff2c\113\uff2c\114" +
    "\uff2c\115\uff2c\116\uff2c\117\uff2c\120\uff2c\121\uff2c\122\uff2c" +
    "\123\uff2c\124\uff2c\125\uff2c\126\uff2c\127\uff2c\130\uff2c\131" +
    "\uff2c\132\uff2c\133\uff2c\001\002\000\052\057\uff5d\061\uff5d" +
    "\063\uff5d\065\uff5d\066\uff5d\073\uff5d\103\207\104\210\105" +
    "\uff5d\106\uff5d\107\uff5d\110\uff5d\111\uff5d\112\uff5d\113\uff5d" +
    "\114\uff5d\115\uff5d\116\uff5d\117\uff5d\120\uff5d\001\002\000" +
    "\050\004\076\005\115\006\123\007\103\010\113\011\125" +
    "\012\124\013\116\014\127\044\065\060\074\071\104\072" +
    "\117\073\126\074\070\075\114\076\101\077\100\100\071" +
    "\001\002\000\050\004\076\005\115\006\123\007\103\010" +
    "\113\011\125\012\124\013\116\014\127\044\065\060\074" +
    "\071\104\072\117\073\126\074\070\075\114\076\101\077" +
    "\100\100\071\001\002\000\126\056\233\057\uff43\060\235" +
    "\061\uff43\063\uff43\064\236\065\uff43\066\uff43\070\232\071" +
    "\231\072\234\073\uff43\074\uff43\075\uff43\076\uff43\101\uff43" +
    "\102\uff43\103\uff43\104\uff43\105\uff43\106\uff43\107\uff43\110" +
    "\uff43\111\uff43\112\uff43\113\uff43\114\uff43\115\uff43\116\uff43" +
    "\117\uff43\120\uff43\121\uff43\122\uff43\123\uff43\124\uff43\125" +
    "\uff43\126\uff43\127\uff43\130\uff43\131\uff43\132\uff43\133\uff43" +
    "\001\002\000\126\056\uff29\057\uff29\060\uff29\061\uff29\063" +
    "\uff29\064\uff29\065\uff29\066\uff29\070\uff29\071\uff29\072\uff29" +
    "\073\uff29\074\uff29\075\uff29\076\uff29\101\uff29\102\uff29\103" +
    "\uff29\104\uff29\105\uff29\106\uff29\107\uff29\110\uff29\111\uff29" +
    "\112\uff29\113\uff29\114\uff29\115\uff29\116\uff29\117\uff29\120" +
    "\uff29\121\uff29\122\uff29\123\uff29\124\uff29\125\uff29\126\uff29" +
    "\127\uff29\130\uff29\131\uff29\132\uff29\133\uff29\001\002\000" +
    "\050\004\076\005\115\006\123\007\103\010\113\011\125" +
    "\012\124\013\116\014\127\044\065\060\224\071\104\072" +
    "\117\073\126\074\070\075\114\076\101\077\100\100\071" +
    "\001\002\000\030\057\uff66\061\uff66\063\uff66\065\uff66\066" +
    "\uff66\113\173\114\uff66\115\uff66\116\uff66\117\uff66\120\uff66" +
    "\001\002\000\026\057\uff68\061\uff68\063\uff68\065\uff68\066" +
    "\uff68\114\171\115\uff68\116\uff68\117\uff68\120\uff68\001\002" +
    "\000\056\057\uff58\061\uff58\063\uff58\065\uff58\066\uff58\073" +
    "\uff58\075\213\076\212\103\uff58\104\uff58\105\uff58\106\uff58" +
    "\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58\114\uff58\115" +
    "\uff58\116\uff58\117\uff58\120\uff58\001\002\000\046\057\uff60" +
    "\061\uff60\063\uff60\065\uff60\066\uff60\073\uff60\105\204\106" +
    "\202\107\205\110\203\111\uff60\112\uff60\113\uff60\114\uff60" +
    "\115\uff60\116\uff60\117\uff60\120\uff60\001\002\000\036\057" +
    "\uff62\061\uff62\063\uff62\065\uff62\066\uff62\073\uff62\111\177" +
    "\112\200\113\uff62\114\uff62\115\uff62\116\uff62\117\uff62\120" +
    "\uff62\001\002\000\024\057\uff6a\061\uff6a\063\uff6a\065\uff6a" +
    "\066\uff6a\115\167\116\uff6a\117\uff6a\120\uff6a\001\002\000" +
    "\126\056\uff28\057\uff28\060\uff28\061\uff28\063\uff28\064\uff28" +
    "\065\uff28\066\uff28\070\uff28\071\uff28\072\uff28\073\uff28\074" +
    "\uff28\075\uff28\076\uff28\101\uff28\102\uff28\103\uff28\104\uff28" +
    "\105\uff28\106\uff28\107\uff28\110\uff28\111\uff28\112\uff28\113" +
    "\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28" +
    "\122\uff28\123\uff28\124\uff28\125\uff28\126\uff28\127\uff28\130" +
    "\uff28\131\uff28\132\uff28\133\uff28\001\002\000\050\004\076" +
    "\005\115\006\123\007\103\010\113\011\125\012\124\013" +
    "\116\014\127\044\065\060\074\071\104\072\117\073\126" +
    "\074\070\075\114\076\101\077\100\100\071\001\002\000" +
    "\126\056\uff2b\057\uff2b\060\uff2b\061\uff2b\063\uff2b\064\uff2b" +
    "\065\uff2b\066\uff2b\070\uff2b\071\uff2b\072\uff2b\073\uff2b\074" +
    "\uff2b\075\uff2b\076\uff2b\101\uff2b\102\uff2b\103\uff2b\104\uff2b" +
    "\105\uff2b\106\uff2b\107\uff2b\110\uff2b\111\uff2b\112\uff2b\113" +
    "\uff2b\114\uff2b\115\uff2b\116\uff2b\117\uff2b\120\uff2b\121\uff2b" +
    "\122\uff2b\123\uff2b\124\uff2b\125\uff2b\126\uff2b\127\uff2b\130" +
    "\uff2b\131\uff2b\132\uff2b\133\uff2b\001\002\000\126\056\uff25" +
    "\057\uff25\060\uff25\061\uff25\063\uff25\064\uff25\065\uff25\066" +
    "\uff25\070\uff25\071\uff25\072\uff25\073\uff25\074\uff25\075\uff25" +
    "\076\uff25\101\uff25\102\uff25\103\uff25\104\uff25\105\uff25\106" +
    "\uff25\107\uff25\110\uff25\111\uff25\112\uff25\113\uff25\114\uff25" +
    "\115\uff25\116\uff25\117\uff25\120\uff25\121\uff25\122\uff25\123" +
    "\uff25\124\uff25\125\uff25\126\uff25\127\uff25\130\uff25\131\uff25" +
    "\132\uff25\133\uff25\001\002\000\050\004\076\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\044\065\060\224\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\022\057\uff6c" +
    "\061\uff6c\063\uff6c\065\uff6c\066\uff6c\116\137\117\140\120" +
    "\uff6c\001\002\000\006\065\uffa7\066\uffa7\001\002\000\064" +
    "\057\uff55\061\uff55\063\uff55\065\uff55\066\uff55\073\uff55\074" +
    "\131\075\uff55\076\uff55\101\133\102\132\103\uff55\104\uff55" +
    "\105\uff55\106\uff55\107\uff55\110\uff55\111\uff55\112\uff55\113" +
    "\uff55\114\uff55\115\uff55\116\uff55\117\uff55\120\uff55\001\002" +
    "\000\126\056\uff2a\057\uff2a\060\uff2a\061\uff2a\063\uff2a\064" +
    "\uff2a\065\uff2a\066\uff2a\070\uff2a\071\uff2a\072\uff2a\073\uff2a" +
    "\074\uff2a\075\uff2a\076\uff2a\101\uff2a\102\uff2a\103\uff2a\104" +
    "\uff2a\105\uff2a\106\uff2a\107\uff2a\110\uff2a\111\uff2a\112\uff2a" +
    "\113\uff2a\114\uff2a\115\uff2a\116\uff2a\117\uff2a\120\uff2a\121" +
    "\uff2a\122\uff2a\123\uff2a\124\uff2a\125\uff2a\126\uff2a\127\uff2a" +
    "\130\uff2a\131\uff2a\132\uff2a\133\uff2a\001\002\000\126\056" +
    "\uff26\057\uff26\060\uff26\061\uff26\063\uff26\064\uff26\065\uff26" +
    "\066\uff26\070\uff26\071\uff26\072\uff26\073\uff26\074\uff26\075" +
    "\uff26\076\uff26\101\uff26\102\uff26\103\uff26\104\uff26\105\uff26" +
    "\106\uff26\107\uff26\110\uff26\111\uff26\112\uff26\113\uff26\114" +
    "\uff26\115\uff26\116\uff26\117\uff26\120\uff26\121\uff26\122\uff26" +
    "\123\uff26\124\uff26\125\uff26\126\uff26\127\uff26\130\uff26\131" +
    "\uff26\132\uff26\133\uff26\001\002\000\126\056\uff27\057\uff27" +
    "\060\uff27\061\uff27\063\uff27\064\uff27\065\uff27\066\uff27\070" +
    "\uff27\071\uff27\072\uff27\073\uff27\074\uff27\075\uff27\076\uff27" +
    "\101\uff27\102\uff27\103\uff27\104\uff27\105\uff27\106\uff27\107" +
    "\uff27\110\uff27\111\uff27\112\uff27\113\uff27\114\uff27\115\uff27" +
    "\116\uff27\117\uff27\120\uff27\121\uff27\122\uff27\123\uff27\124" +
    "\uff27\125\uff27\126\uff27\127\uff27\130\uff27\131\uff27\132\uff27" +
    "\133\uff27\001\002\000\050\004\076\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\044\065" +
    "\060\074\071\104\072\117\073\126\074\070\075\114\076" +
    "\101\077\100\100\071\001\002\000\126\056\uff24\057\uff24" +
    "\060\uff24\061\uff24\063\uff24\064\uff24\065\uff24\066\uff24\070" +
    "\uff24\071\uff24\072\uff24\073\uff24\074\uff24\075\uff24\076\uff24" +
    "\101\uff24\102\uff24\103\uff24\104\uff24\105\uff24\106\uff24\107" +
    "\uff24\110\uff24\111\uff24\112\uff24\113\uff24\114\uff24\115\uff24" +
    "\116\uff24\117\uff24\120\uff24\121\uff24\122\uff24\123\uff24\124" +
    "\uff24\125\uff24\126\uff24\127\uff24\130\uff24\131\uff24\132\uff24" +
    "\133\uff24\001\002\000\112\057\uff40\061\uff40\063\uff40\065" +
    "\uff40\066\uff40\073\uff40\074\uff40\075\uff40\076\uff40\101\uff40" +
    "\102\uff40\103\uff40\104\uff40\105\uff40\106\uff40\107\uff40\110" +
    "\uff40\111\uff40\112\uff40\113\uff40\114\uff40\115\uff40\116\uff40" +
    "\117\uff40\120\uff40\121\uff40\122\uff40\123\uff40\124\uff40\125" +
    "\uff40\126\uff40\127\uff40\130\uff40\131\uff40\132\uff40\133\uff40" +
    "\001\002\000\050\004\076\005\115\006\123\007\103\010" +
    "\113\011\125\012\124\013\116\014\127\044\065\060\074" +
    "\071\104\072\117\073\126\074\070\075\114\076\101\077" +
    "\100\100\071\001\002\000\050\004\076\005\115\006\123" +
    "\007\103\010\113\011\125\012\124\013\116\014\127\044" +
    "\065\060\074\071\104\072\117\073\126\074\070\075\114" +
    "\076\101\077\100\100\071\001\002\000\050\004\076\005" +
    "\115\006\123\007\103\010\113\011\125\012\124\013\116" +
    "\014\127\044\065\060\074\071\104\072\117\073\126\074" +
    "\070\075\114\076\101\077\100\100\071\001\002\000\064" +
    "\057\uff50\061\uff50\063\uff50\065\uff50\066\uff50\073\uff50\074" +
    "\uff50\075\uff50\076\uff50\101\uff50\102\uff50\103\uff50\104\uff50" +
    "\105\uff50\106\uff50\107\uff50\110\uff50\111\uff50\112\uff50\113" +
    "\uff50\114\uff50\115\uff50\116\uff50\117\uff50\120\uff50\001\002" +
    "\000\064\057\uff4f\061\uff4f\063\uff4f\065\uff4f\066\uff4f\073" +
    "\uff4f\074\uff4f\075\uff4f\076\uff4f\101\uff4f\102\uff4f\103\uff4f" +
    "\104\uff4f\105\uff4f\106\uff4f\107\uff4f\110\uff4f\111\uff4f\112" +
    "\uff4f\113\uff4f\114\uff4f\115\uff4f\116\uff4f\117\uff4f\120\uff4f" +
    "\001\002\000\064\057\uff51\061\uff51\063\uff51\065\uff51\066" +
    "\uff51\073\uff51\074\uff51\075\uff51\076\uff51\101\uff51\102\uff51" +
    "\103\uff51\104\uff51\105\uff51\106\uff51\107\uff51\110\uff51\111" +
    "\uff51\112\uff51\113\uff51\114\uff51\115\uff51\116\uff51\117\uff51" +
    "\120\uff51\001\002\000\050\004\076\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\044\065" +
    "\060\074\071\104\072\117\073\126\074\070\075\114\076" +
    "\101\077\100\100\071\001\002\000\050\004\076\005\115" +
    "\006\123\007\103\010\113\011\125\012\124\013\116\014" +
    "\127\044\065\060\074\071\104\072\117\073\126\074\070" +
    "\075\114\076\101\077\100\100\071\001\002\000\006\065" +
    "\162\120\163\001\002\000\112\057\uff2e\061\uff2e\063\uff2e" +
    "\065\uff2e\066\uff2e\073\uff2e\074\uff2e\075\uff2e\076\uff2e\101" +
    "\uff2e\102\uff2e\103\uff2e\104\uff2e\105\uff2e\106\uff2e\107\uff2e" +
    "\110\uff2e\111\uff2e\112\uff2e\113\uff2e\114\uff2e\115\uff2e\116" +
    "\uff2e\117\uff2e\120\uff2e\121\156\122\146\123\152\124\157" +
    "\125\151\126\150\127\160\130\153\131\147\132\145\133" +
    "\154\001\002\000\016\057\uff6e\061\uff6e\063\uff6e\065\uff6e" +
    "\066\uff6e\120\uff6e\001\002\000\014\057\uff71\061\uff71\065" +
    "\uff71\066\uff71\120\uff71\001\002\000\050\004\uff45\005\uff45" +
    "\006\uff45\007\uff45\010\uff45\011\uff45\012\uff45\013\uff45\014" +
    "\uff45\044\uff45\060\uff45\071\uff45\072\uff45\073\uff45\074\uff45" +
    "\075\uff45\076\uff45\077\uff45\100\uff45\001\002\000\050\004" +
    "\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\011\uff4d\012\uff4d" +
    "\013\uff4d\014\uff4d\044\uff4d\060\uff4d\071\uff4d\072\uff4d\073" +
    "\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d\100\uff4d\001\002" +
    "\000\050\004\uff46\005\uff46\006\uff46\007\uff46\010\uff46\011" +
    "\uff46\012\uff46\013\uff46\014\uff46\044\uff46\060\uff46\071\uff46" +
    "\072\uff46\073\uff46\074\uff46\075\uff46\076\uff46\077\uff46\100" +
    "\uff46\001\002\000\050\004\uff49\005\uff49\006\uff49\007\uff49" +
    "\010\uff49\011\uff49\012\uff49\013\uff49\014\uff49\044\uff49\060" +
    "\uff49\071\uff49\072\uff49\073\uff49\074\uff49\075\uff49\076\uff49" +
    "\077\uff49\100\uff49\001\002\000\050\004\uff4a\005\uff4a\006" +
    "\uff4a\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a" +
    "\044\uff4a\060\uff4a\071\uff4a\072\uff4a\073\uff4a\074\uff4a\075" +
    "\uff4a\076\uff4a\077\uff4a\100\uff4a\001\002\000\050\004\uff4c" +
    "\005\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c\012\uff4c\013" +
    "\uff4c\014\uff4c\044\uff4c\060\uff4c\071\uff4c\072\uff4c\073\uff4c" +
    "\074\uff4c\075\uff4c\076\uff4c\077\uff4c\100\uff4c\001\002\000" +
    "\050\004\uff47\005\uff47\006\uff47\007\uff47\010\uff47\011\uff47" +
    "\012\uff47\013\uff47\014\uff47\044\uff47\060\uff47\071\uff47\072" +
    "\uff47\073\uff47\074\uff47\075\uff47\076\uff47\077\uff47\100\uff47" +
    "\001\002\000\050\004\uff44\005\uff44\006\uff44\007\uff44\010" +
    "\uff44\011\uff44\012\uff44\013\uff44\014\uff44\044\uff44\060\uff44" +
    "\071\uff44\072\uff44\073\uff44\074\uff44\075\uff44\076\uff44\077" +
    "\uff44\100\uff44\001\002\000\050\004\076\005\115\006\123" +
    "\007\103\010\113\011\125\012\124\013\116\014\127\044" +
    "\065\060\074\071\104\072\117\073\126\074\070\075\114" +
    "\076\101\077\100\100\071\001\002\000\050\004\uff4e\005" +
    "\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e" +
    "\014\uff4e\044\uff4e\060\uff4e\071\uff4e\072\uff4e\073\uff4e\074" +
    "\uff4e\075\uff4e\076\uff4e\077\uff4e\100\uff4e\001\002\000\050" +
    "\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b\011\uff4b\012" +
    "\uff4b\013\uff4b\014\uff4b\044\uff4b\060\uff4b\071\uff4b\072\uff4b" +
    "\073\uff4b\074\uff4b\075\uff4b\076\uff4b\077\uff4b\100\uff4b\001" +
    "\002\000\050\004\uff48\005\uff48\006\uff48\007\uff48\010\uff48" +
    "\011\uff48\012\uff48\013\uff48\014\uff48\044\uff48\060\uff48\071" +
    "\uff48\072\uff48\073\uff48\074\uff48\075\uff48\076\uff48\077\uff48" +
    "\100\uff48\001\002\000\016\057\uff6d\061\uff6d\063\uff6d\065" +
    "\uff6d\066\uff6d\120\uff6d\001\002\000\050\004\076\005\115" +
    "\006\123\007\103\010\113\011\125\012\124\013\116\014" +
    "\127\044\065\060\074\071\104\072\117\073\126\074\070" +
    "\075\114\076\101\077\100\100\071\001\002\000\050\004" +
    "\076\005\115\006\123\007\103\010\113\011\125\012\124" +
    "\013\116\014\127\044\065\060\074\071\104\072\117\073" +
    "\126\074\070\075\114\076\101\077\100\100\071\001\002" +
    "\000\016\057\uff6b\061\uff6b\063\uff6b\065\uff6b\066\uff6b\120" +
    "\uff6b\001\002\000\014\057\uff70\061\uff70\065\uff70\066\uff70" +
    "\120\uff70\001\002\000\024\057\uff69\061\uff69\063\uff69\065" +
    "\uff69\066\uff69\115\167\116\uff69\117\uff69\120\uff69\001\002" +
    "\000\050\004\076\005\115\006\123\007\103\010\113\011" +
    "\125\012\124\013\116\014\127\044\065\060\074\071\104" +
    "\072\117\073\126\074\070\075\114\076\101\077\100\100" +
    "\071\001\002\000\026\057\uff67\061\uff67\063\uff67\065\uff67" +
    "\066\uff67\114\171\115\uff67\116\uff67\117\uff67\120\uff67\001" +
    "\002\000\050\004\076\005\115\006\123\007\103\010\113" +
    "\011\125\012\124\013\116\014\127\044\065\060\074\071" +
    "\104\072\117\073\126\074\070\075\114\076\101\077\100" +
    "\100\071\001\002\000\030\057\uff65\061\uff65\063\uff65\065" +
    "\uff65\066\uff65\113\173\114\uff65\115\uff65\116\uff65\117\uff65" +
    "\120\uff65\001\002\000\050\004\076\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\044\065" +
    "\060\074\071\104\072\117\073\126\074\070\075\114\076" +
    "\101\077\100\100\071\001\002\000\032\057\uff63\061\uff63" +
    "\063\uff63\065\uff63\066\uff63\073\175\113\uff63\114\uff63\115" +
    "\uff63\116\uff63\117\uff63\120\uff63\001\002\000\050\004\076" +
    "\005\115\006\123\007\103\010\113\011\125\012\124\013" +
    "\116\014\127\044\065\060\074\071\104\072\117\073\126" +
    "\074\070\075\114\076\101\077\100\100\071\001\002\000" +
    "\036\057\uff61\061\uff61\063\uff61\065\uff61\066\uff61\073\uff61" +
    "\111\177\112\200\113\uff61\114\uff61\115\uff61\116\uff61\117" +
    "\uff61\120\uff61\001\002\000\050\004\076\005\115\006\123" +
    "\007\103\010\113\011\125\012\124\013\116\014\127\044" +
    "\065\060\074\071\104\072\117\073\126\074\070\075\114" +
    "\076\101\077\100\100\071\001\002\000\050\004\076\005" +
    "\115\006\123\007\103\010\113\011\125\012\124\013\116" +
    "\014\127\044\065\060\074\071\104\072\117\073\126\074" +
    "\070\075\114\076\101\077\100\100\071\001\002\000\046" +
    "\057\uff5e\061\uff5e\063\uff5e\065\uff5e\066\uff5e\073\uff5e\105" +
    "\204\106\202\107\205\110\203\111\uff5e\112\uff5e\113\uff5e" +
    "\114\uff5e\115\uff5e\116\uff5e\117\uff5e\120\uff5e\001\002\000" +
    "\050\004\076\005\115\006\123\007\103\010\113\011\125" +
    "\012\124\013\116\014\127\044\065\060\074\071\104\072" +
    "\117\073\126\074\070\075\114\076\101\077\100\100\071" +
    "\001\002\000\050\004\076\005\115\006\123\007\103\010" +
    "\113\011\125\012\124\013\116\014\127\044\065\060\074" +
    "\071\104\072\117\073\126\074\070\075\114\076\101\077" +
    "\100\100\071\001\002\000\050\004\076\005\115\006\123" +
    "\007\103\010\113\011\125\012\124\013\116\014\127\044" +
    "\065\060\074\071\104\072\117\073\126\074\070\075\114" +
    "\076\101\077\100\100\071\001\002\000\050\004\076\005" +
    "\115\006\123\007\103\010\113\011\125\012\124\013\116" +
    "\014\127\044\065\060\074\071\104\072\117\073\126\074" +
    "\070\075\114\076\101\077\100\100\071\001\002\000\052" +
    "\057\uff5a\061\uff5a\063\uff5a\065\uff5a\066\uff5a\073\uff5a\103" +
    "\207\104\210\105\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a" +
    "\112\uff5a\113\uff5a\114\uff5a\115\uff5a\116\uff5a\117\uff5a\120" +
    "\uff5a\001\002\000\050\004\076\005\115\006\123\007\103" +
    "\010\113\011\125\012\124\013\116\014\127\044\065\060" +
    "\074\071\104\072\117\073\126\074\070\075\114\076\101" +
    "\077\100\100\071\001\002\000\050\004\076\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\044\065\060\074\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\056\057\uff56" +
    "\061\uff56\063\uff56\065\uff56\066\uff56\073\uff56\075\213\076" +
    "\212\103\uff56\104\uff56\105\uff56\106\uff56\107\uff56\110\uff56" +
    "\111\uff56\112\uff56\113\uff56\114\uff56\115\uff56\116\uff56\117" +
    "\uff56\120\uff56\001\002\000\050\004\076\005\115\006\123" +
    "\007\103\010\113\011\125\012\124\013\116\014\127\044" +
    "\065\060\074\071\104\072\117\073\126\074\070\075\114" +
    "\076\101\077\100\100\071\001\002\000\050\004\076\005" +
    "\115\006\123\007\103\010\113\011\125\012\124\013\116" +
    "\014\127\044\065\060\074\071\104\072\117\073\126\074" +
    "\070\075\114\076\101\077\100\100\071\001\002\000\064" +
    "\057\uff54\061\uff54\063\uff54\065\uff54\066\uff54\073\uff54\074" +
    "\131\075\uff54\076\uff54\101\133\102\132\103\uff54\104\uff54" +
    "\105\uff54\106\uff54\107\uff54\110\uff54\111\uff54\112\uff54\113" +
    "\uff54\114\uff54\115\uff54\116\uff54\117\uff54\120\uff54\001\002" +
    "\000\064\057\uff53\061\uff53\063\uff53\065\uff53\066\uff53\073" +
    "\uff53\074\131\075\uff53\076\uff53\101\133\102\132\103\uff53" +
    "\104\uff53\105\uff53\106\uff53\107\uff53\110\uff53\111\uff53\112" +
    "\uff53\113\uff53\114\uff53\115\uff53\116\uff53\117\uff53\120\uff53" +
    "\001\002\000\056\057\uff57\061\uff57\063\uff57\065\uff57\066" +
    "\uff57\073\uff57\075\213\076\212\103\uff57\104\uff57\105\uff57" +
    "\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57\113\uff57\114" +
    "\uff57\115\uff57\116\uff57\117\uff57\120\uff57\001\002\000\052" +
    "\057\uff5c\061\uff5c\063\uff5c\065\uff5c\066\uff5c\073\uff5c\103" +
    "\207\104\210\105\uff5c\106\uff5c\107\uff5c\110\uff5c\111\uff5c" +
    "\112\uff5c\113\uff5c\114\uff5c\115\uff5c\116\uff5c\117\uff5c\120" +
    "\uff5c\001\002\000\052\057\uff59\061\uff59\063\uff59\065\uff59" +
    "\066\uff59\073\uff59\103\207\104\210\105\uff59\106\uff59\107" +
    "\uff59\110\uff59\111\uff59\112\uff59\113\uff59\114\uff59\115\uff59" +
    "\116\uff59\117\uff59\120\uff59\001\002\000\052\057\uff5b\061" +
    "\uff5b\063\uff5b\065\uff5b\066\uff5b\073\uff5b\103\207\104\210" +
    "\105\uff5b\106\uff5b\107\uff5b\110\uff5b\111\uff5b\112\uff5b\113" +
    "\uff5b\114\uff5b\115\uff5b\116\uff5b\117\uff5b\120\uff5b\001\002" +
    "\000\046\057\uff5f\061\uff5f\063\uff5f\065\uff5f\066\uff5f\073" +
    "\uff5f\105\204\106\202\107\205\110\203\111\uff5f\112\uff5f" +
    "\113\uff5f\114\uff5f\115\uff5f\116\uff5f\117\uff5f\120\uff5f\001" +
    "\002\000\112\057\uff41\061\uff41\063\uff41\065\uff41\066\uff41" +
    "\073\uff41\074\uff41\075\uff41\076\uff41\101\uff41\102\uff41\103" +
    "\uff41\104\uff41\105\uff41\106\uff41\107\uff41\110\uff41\111\uff41" +
    "\112\uff41\113\uff41\114\uff41\115\uff41\116\uff41\117\uff41\120" +
    "\uff41\121\uff41\122\uff41\123\uff41\124\uff41\125\uff41\126\uff41" +
    "\127\uff41\130\uff41\131\uff41\132\uff41\133\uff41\001\002\000" +
    "\050\004\076\005\115\006\123\007\103\010\113\011\125" +
    "\012\124\013\116\014\127\044\065\060\074\071\104\072" +
    "\117\073\126\074\070\075\114\076\101\077\100\100\071" +
    "\001\002\000\006\061\226\065\162\001\002\000\126\056" +
    "\uff23\057\uff23\060\uff23\061\uff23\063\uff23\064\uff23\065\uff23" +
    "\066\uff23\070\uff23\071\uff23\072\uff23\073\uff23\074\uff23\075" +
    "\uff23\076\uff23\101\uff23\102\uff23\103\uff23\104\uff23\105\uff23" +
    "\106\uff23\107\uff23\110\uff23\111\uff23\112\uff23\113\uff23\114" +
    "\uff23\115\uff23\116\uff23\117\uff23\120\uff23\121\uff23\122\uff23" +
    "\123\uff23\124\uff23\125\uff23\126\uff23\127\uff23\130\uff23\131" +
    "\uff23\132\uff23\133\uff23\001\002\000\112\057\uff3e\061\uff3e" +
    "\063\uff3e\065\uff3e\066\uff3e\073\uff3e\074\uff3e\075\uff3e\076" +
    "\uff3e\101\uff3e\102\uff3e\103\uff3e\104\uff3e\105\uff3e\106\uff3e" +
    "\107\uff3e\110\uff3e\111\uff3e\112\uff3e\113\uff3e\114\uff3e\115" +
    "\uff3e\116\uff3e\117\uff3e\120\uff3e\121\uff3e\122\uff3e\123\uff3e" +
    "\124\uff3e\125\uff3e\126\uff3e\127\uff3e\130\uff3e\131\uff3e\132" +
    "\uff3e\133\uff3e\001\002\000\112\057\uff42\061\uff42\063\uff42" +
    "\065\uff42\066\uff42\073\uff42\074\uff42\075\uff42\076\uff42\101" +
    "\uff42\102\uff42\103\uff42\104\uff42\105\uff42\106\uff42\107\uff42" +
    "\110\uff42\111\uff42\112\uff42\113\uff42\114\uff42\115\uff42\116" +
    "\uff42\117\uff42\120\uff42\121\uff42\122\uff42\123\uff42\124\uff42" +
    "\125\uff42\126\uff42\127\uff42\130\uff42\131\uff42\132\uff42\133" +
    "\uff42\001\002\000\126\056\uff32\057\uff32\060\uff32\061\uff32" +
    "\063\uff32\064\uff32\065\uff32\066\uff32\070\uff32\071\uff32\072" +
    "\uff32\073\uff32\074\uff32\075\uff32\076\uff32\101\uff32\102\uff32" +
    "\103\uff32\104\uff32\105\uff32\106\uff32\107\uff32\110\uff32\111" +
    "\uff32\112\uff32\113\uff32\114\uff32\115\uff32\116\uff32\117\uff32" +
    "\120\uff32\121\uff32\122\uff32\123\uff32\124\uff32\125\uff32\126" +
    "\uff32\127\uff32\130\uff32\131\uff32\132\uff32\133\uff32\001\002" +
    "\000\004\004\250\001\002\000\050\004\076\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\044\065\060\074\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\126\056\uff31" +
    "\057\uff31\060\uff31\061\uff31\063\uff31\064\uff31\065\uff31\066" +
    "\uff31\070\uff31\071\uff31\072\uff31\073\uff31\074\uff31\075\uff31" +
    "\076\uff31\101\uff31\102\uff31\103\uff31\104\uff31\105\uff31\106" +
    "\uff31\107\uff31\110\uff31\111\uff31\112\uff31\113\uff31\114\uff31" +
    "\115\uff31\116\uff31\117\uff31\120\uff31\121\uff31\122\uff31\123" +
    "\uff31\124\uff31\125\uff31\126\uff31\127\uff31\130\uff31\131\uff31" +
    "\132\uff31\133\uff31\001\002\000\052\004\076\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\044\065\060\074\061\240\071\104\072\117\073\126\074" +
    "\070\075\114\076\101\077\100\100\071\001\002\000\004" +
    "\004\237\001\002\000\126\056\uff34\057\uff34\060\uff34\061" +
    "\uff34\063\uff34\064\uff34\065\uff34\066\uff34\070\uff34\071\uff34" +
    "\072\uff34\073\uff34\074\uff34\075\uff34\076\uff34\101\uff34\102" +
    "\uff34\103\uff34\104\uff34\105\uff34\106\uff34\107\uff34\110\uff34" +
    "\111\uff34\112\uff34\113\uff34\114\uff34\115\uff34\116\uff34\117" +
    "\uff34\120\uff34\121\uff34\122\uff34\123\uff34\124\uff34\125\uff34" +
    "\126\uff34\127\uff34\130\uff34\131\uff34\132\uff34\133\uff34\001" +
    "\002\000\126\056\uff35\057\uff35\060\uff35\061\uff35\063\uff35" +
    "\064\uff35\065\uff35\066\uff35\070\uff35\071\uff35\072\uff35\073" +
    "\uff35\074\uff35\075\uff35\076\uff35\101\uff35\102\uff35\103\uff35" +
    "\104\uff35\105\uff35\106\uff35\107\uff35\110\uff35\111\uff35\112" +
    "\uff35\113\uff35\114\uff35\115\uff35\116\uff35\117\uff35\120\uff35" +
    "\121\uff35\122\uff35\123\uff35\124\uff35\125\uff35\126\uff35\127" +
    "\uff35\130\uff35\131\uff35\132\uff35\133\uff35\001\002\000\006" +
    "\061\244\065\243\001\002\000\006\061\uff30\065\uff30\001" +
    "\002\000\050\004\076\005\115\006\123\007\103\010\113" +
    "\011\125\012\124\013\116\014\127\044\065\060\074\071" +
    "\104\072\117\073\126\074\070\075\114\076\101\077\100" +
    "\100\071\001\002\000\126\056\uff36\057\uff36\060\uff36\061" +
    "\uff36\063\uff36\064\uff36\065\uff36\066\uff36\070\uff36\071\uff36" +
    "\072\uff36\073\uff36\074\uff36\075\uff36\076\uff36\101\uff36\102" +
    "\uff36\103\uff36\104\uff36\105\uff36\106\uff36\107\uff36\110\uff36" +
    "\111\uff36\112\uff36\113\uff36\114\uff36\115\uff36\116\uff36\117" +
    "\uff36\120\uff36\121\uff36\122\uff36\123\uff36\124\uff36\125\uff36" +
    "\126\uff36\127\uff36\130\uff36\131\uff36\132\uff36\133\uff36\001" +
    "\002\000\006\061\uff2f\065\uff2f\001\002\000\006\057\247" +
    "\065\162\001\002\000\126\056\uff37\057\uff37\060\uff37\061" +
    "\uff37\063\uff37\064\uff37\065\uff37\066\uff37\070\uff37\071\uff37" +
    "\072\uff37\073\uff37\074\uff37\075\uff37\076\uff37\101\uff37\102" +
    "\uff37\103\uff37\104\uff37\105\uff37\106\uff37\107\uff37\110\uff37" +
    "\111\uff37\112\uff37\113\uff37\114\uff37\115\uff37\116\uff37\117" +
    "\uff37\120\uff37\121\uff37\122\uff37\123\uff37\124\uff37\125\uff37" +
    "\126\uff37\127\uff37\130\uff37\131\uff37\132\uff37\133\uff37\001" +
    "\002\000\126\056\uff33\057\uff33\060\uff33\061\uff33\063\uff33" +
    "\064\uff33\065\uff33\066\uff33\070\uff33\071\uff33\072\uff33\073" +
    "\uff33\074\uff33\075\uff33\076\uff33\101\uff33\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\111\uff33\112" +
    "\uff33\113\uff33\114\uff33\115\uff33\116\uff33\117\uff33\120\uff33" +
    "\121\uff33\122\uff33\123\uff33\124\uff33\125\uff33\126\uff33\127" +
    "\uff33\130\uff33\131\uff33\132\uff33\133\uff33\001\002\000\112" +
    "\057\uff3d\061\uff3d\063\uff3d\065\uff3d\066\uff3d\073\uff3d\074" +
    "\uff3d\075\uff3d\076\uff3d\101\uff3d\102\uff3d\103\uff3d\104\uff3d" +
    "\105\uff3d\106\uff3d\107\uff3d\110\uff3d\111\uff3d\112\uff3d\113" +
    "\uff3d\114\uff3d\115\uff3d\116\uff3d\117\uff3d\120\uff3d\121\uff3d" +
    "\122\uff3d\123\uff3d\124\uff3d\125\uff3d\126\uff3d\127\uff3d\130" +
    "\uff3d\131\uff3d\132\uff3d\133\uff3d\001\002\000\112\057\uff3c" +
    "\061\uff3c\063\uff3c\065\uff3c\066\uff3c\073\uff3c\074\uff3c\075" +
    "\uff3c\076\uff3c\101\uff3c\102\uff3c\103\uff3c\104\uff3c\105\uff3c" +
    "\106\uff3c\107\uff3c\110\uff3c\111\uff3c\112\uff3c\113\uff3c\114" +
    "\uff3c\115\uff3c\116\uff3c\117\uff3c\120\uff3c\121\uff3c\122\uff3c" +
    "\123\uff3c\124\uff3c\125\uff3c\126\uff3c\127\uff3c\130\uff3c\131" +
    "\uff3c\132\uff3c\133\uff3c\001\002\000\004\061\335\001\002" +
    "\000\012\056\257\060\260\061\uff96\074\020\001\002\000" +
    "\004\061\uff97\001\002\000\012\056\263\060\264\061\uff93" +
    "\065\uff93\001\002\000\052\004\076\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\044\065" +
    "\057\333\060\074\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\062\015\022" +
    "\016\031\021\010\022\007\026\013\030\037\031\024\032" +
    "\041\036\016\037\043\040\017\042\005\043\036\045\021" +
    "\046\046\050\025\051\034\052\030\053\032\054\044\056" +
    "\257\060\260\061\276\074\020\001\002\000\010\056\257" +
    "\060\260\061\uff95\001\002\000\012\056\263\060\264\061" +
    "\uff94\065\uff94\001\002\000\052\004\076\005\115\006\123" +
    "\007\103\010\113\011\125\012\124\013\116\014\127\044" +
    "\065\057\330\060\074\071\104\072\117\073\126\074\070" +
    "\075\114\076\101\077\100\100\071\001\002\000\054\015" +
    "\022\016\031\021\010\022\007\026\013\030\037\031\024" +
    "\032\041\036\016\037\043\040\017\042\005\043\036\045" +
    "\021\046\046\050\025\051\034\052\030\053\032\054\044" +
    "\061\266\001\002\000\004\061\326\001\002\000\012\056" +
    "\uff8c\060\uff8c\061\uff8c\065\uff8c\001\002\000\006\061\uffd9" +
    "\065\323\001\002\000\006\061\uffd7\065\uffd7\001\002\000" +
    "\016\004\026\056\257\060\275\061\uffd3\065\uffd3\074\020" +
    "\001\002\000\014\004\026\056\257\060\275\061\uff95\065" +
    "\uff95\001\002\000\006\061\uffd4\065\uffd4\001\002\000\006" +
    "\061\uffd5\065\uffd5\001\002\000\064\004\026\015\022\016" +
    "\031\021\010\022\007\026\013\030\037\031\024\032\041" +
    "\036\016\037\043\040\017\042\005\043\036\045\021\046" +
    "\046\050\025\051\034\052\030\053\032\054\044\056\257" +
    "\060\275\061\276\074\020\001\002\000\012\056\uff8a\060" +
    "\uff8a\061\uff8a\065\uff8a\001\002\000\004\061\304\001\002" +
    "\000\004\061\303\001\002\000\004\061\302\001\002\000" +
    "\072\015\uffe5\016\uffe5\021\uffe5\022\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5\065\uffe5\066" +
    "\uffe5\120\uffe5\121\uffe5\001\002\000\012\056\uff92\060\uff92" +
    "\061\uff92\065\uff92\001\002\000\012\056\uff8b\060\uff8b\061" +
    "\uff8b\065\uff8b\001\002\000\072\015\uffe8\016\uffe8\021\uffe8" +
    "\022\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\306\060\307\061" +
    "\uffe8\062\uffe8\065\uffe8\066\uffe8\120\uffe8\121\uffe8\001\002" +
    "\000\052\004\076\005\115\006\123\007\103\010\113\011" +
    "\125\012\124\013\116\014\127\044\065\057\321\060\074" +
    "\071\104\072\117\073\126\074\070\075\114\076\101\077" +
    "\100\100\071\001\002\000\056\004\312\015\022\016\031" +
    "\021\010\022\007\026\013\030\037\031\024\032\041\036" +
    "\016\037\043\040\017\042\005\043\036\045\021\046\046" +
    "\050\025\051\034\052\030\053\032\054\044\061\311\001" +
    "\002\000\004\061\317\001\002\000\072\015\uffe0\016\uffe0" +
    "\021\uffe0\022\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\056\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\065\uffe0\066\uffe0\120\uffe0\121\uffe0" +
    "\001\002\000\006\061\uffd1\065\uffd1\001\002\000\006\061" +
    "\315\065\314\001\002\000\004\004\316\001\002\000\072" +
    "\015\uffe1\016\uffe1\021\uffe1\022\uffe1\026\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1" +
    "\045\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\056\uffe1\060\uffe1\061\uffe1\062\uffe1\065\uffe1\066\uffe1" +
    "\120\uffe1\121\uffe1\001\002\000\006\061\uffd2\065\uffd2\001" +
    "\002\000\072\015\uffe2\016\uffe2\021\uffe2\022\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\036\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\043\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\056\uffe2\060\uffe2\061\uffe2\062\uffe2\065" +
    "\uffe2\066\uffe2\120\uffe2\121\uffe2\001\002\000\004\057\322" +
    "\001\002\000\072\015\uffe3\016\uffe3\021\uffe3\022\uffe3\026" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\042\uffe3\043\uffe3\045\uffe3\046\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\065\uffe3\066\uffe3\120\uffe3\121\uffe3\001\002\000\072\015" +
    "\uffe4\016\uffe4\021\uffe4\022\uffe4\026\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\045" +
    "\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\056\uffe4\060\uffe4\061\uffe4\062\uffe4\065\uffe4\066\uffe4\120" +
    "\uffe4\121\uffe4\001\002\000\054\015\022\016\031\021\010" +
    "\022\007\026\013\030\037\031\024\032\041\036\016\037" +
    "\043\040\017\042\005\043\036\045\021\046\046\050\025" +
    "\051\034\052\030\053\032\054\044\067\324\001\002\000" +
    "\004\061\uffd8\001\002\000\006\061\uffd6\065\uffd6\001\002" +
    "\000\012\056\uff8d\060\uff8d\061\uff8d\065\uff8d\001\002\000" +
    "\004\057\331\001\002\000\012\056\uff90\060\uff90\061\uff90" +
    "\065\uff90\001\002\000\012\056\uff91\060\uff91\061\uff91\065" +
    "\uff91\001\002\000\004\057\334\001\002\000\012\056\uff8e" +
    "\060\uff8e\061\uff8e\065\uff8e\001\002\000\012\056\uff8f\060" +
    "\uff8f\061\uff8f\065\uff8f\001\002\000\050\004\076\005\115" +
    "\006\123\007\103\010\113\011\125\012\124\013\116\014" +
    "\127\044\065\060\074\071\104\072\117\073\126\074\070" +
    "\075\114\076\101\077\100\100\071\001\002\000\112\057" +
    "\uff2d\061\uff2d\063\uff2d\065\uff2d\066\uff2d\073\uff2d\074\uff2d" +
    "\075\uff2d\076\uff2d\101\uff2d\102\uff2d\103\uff2d\104\uff2d\105" +
    "\uff2d\106\uff2d\107\uff2d\110\uff2d\111\uff2d\112\uff2d\113\uff2d" +
    "\114\uff2d\115\uff2d\116\uff2d\117\uff2d\120\uff2d\121\uff2d\122" +
    "\uff2d\123\uff2d\124\uff2d\125\uff2d\126\uff2d\127\uff2d\130\uff2d" +
    "\131\uff2d\132\uff2d\133\uff2d\001\002\000\112\057\uff3b\061" +
    "\uff3b\063\uff3b\065\uff3b\066\uff3b\073\uff3b\074\uff3b\075\uff3b" +
    "\076\uff3b\101\uff3b\102\uff3b\103\uff3b\104\uff3b\105\uff3b\106" +
    "\uff3b\107\uff3b\110\uff3b\111\uff3b\112\uff3b\113\uff3b\114\uff3b" +
    "\115\uff3b\116\uff3b\117\uff3b\120\uff3b\121\uff3b\122\uff3b\123" +
    "\uff3b\124\uff3b\125\uff3b\126\uff3b\127\uff3b\130\uff3b\131\uff3b" +
    "\132\uff3b\133\uff3b\001\002\000\112\057\uff3f\061\uff3f\063" +
    "\uff3f\065\uff3f\066\uff3f\073\uff3f\074\uff3f\075\uff3f\076\uff3f" +
    "\101\uff3f\102\uff3f\103\uff3f\104\uff3f\105\uff3f\106\uff3f\107" +
    "\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f\115\uff3f" +
    "\116\uff3f\117\uff3f\120\uff3f\121\uff3f\122\uff3f\123\uff3f\124" +
    "\uff3f\125\uff3f\126\uff3f\127\uff3f\130\uff3f\131\uff3f\132\uff3f" +
    "\133\uff3f\001\002\000\112\057\uff3a\061\uff3a\063\uff3a\065" +
    "\uff3a\066\uff3a\073\uff3a\074\uff3a\075\uff3a\076\uff3a\101\uff3a" +
    "\102\uff3a\103\uff3a\104\uff3a\105\uff3a\106\uff3a\107\uff3a\110" +
    "\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a" +
    "\117\uff3a\120\uff3a\121\uff3a\122\uff3a\123\uff3a\124\uff3a\125" +
    "\uff3a\126\uff3a\127\uff3a\130\uff3a\131\uff3a\132\uff3a\133\uff3a" +
    "\001\002\000\106\004\076\005\115\006\123\007\103\010" +
    "\113\011\125\012\124\013\116\014\127\015\022\021\010" +
    "\022\007\026\013\030\037\032\041\036\016\037\043\042" +
    "\005\043\036\044\065\046\046\051\034\052\030\053\032" +
    "\054\044\060\074\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\004\061\344" +
    "\001\002\000\112\057\uff39\061\uff39\063\uff39\065\uff39\066" +
    "\uff39\073\uff39\074\uff39\075\uff39\076\uff39\101\uff39\102\uff39" +
    "\103\uff39\104\uff39\105\uff39\106\uff39\107\uff39\110\uff39\111" +
    "\uff39\112\uff39\113\uff39\114\uff39\115\uff39\116\uff39\117\uff39" +
    "\120\uff39\121\uff39\122\uff39\123\uff39\124\uff39\125\uff39\126" +
    "\uff39\127\uff39\130\uff39\131\uff39\132\uff39\133\uff39\001\002" +
    "\000\012\004\026\060\014\074\020\120\060\001\002\000" +
    "\042\015\uffaf\021\uffaf\022\uffaf\026\uffaf\030\uffaf\032\uffaf" +
    "\036\uffaf\037\uffaf\042\uffaf\043\uffaf\046\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\063\uffaf\001\002\000\006\065\uffaa" +
    "\066\uffaa\001\002\000\006\065\uffa6\066\uffa6\001\002\000" +
    "\016\004\uffac\056\uffac\060\uffac\061\uffac\074\uffac\120\uffac" +
    "\001\002\000\072\004\uffb6\015\uffb6\016\uffb6\021\uffb6\022" +
    "\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\056\uffb6\060\uffb6\061\uffb6" +
    "\065\uffb6\066\uffb6\074\uffb6\120\uffb6\001\002\000\042\015" +
    "\uffb0\021\uffb0\022\uffb0\026\uffb0\030\uffb0\032\uffb0\036\uffb0" +
    "\037\uffb0\042\uffb0\043\uffb0\046\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\063\uffb0\001\002\000\016\004\uffae\056\uffae" +
    "\060\uffae\061\uffae\074\uffae\120\uffae\001\002\000\040\015" +
    "\022\021\010\022\007\026\013\030\037\032\041\036\016" +
    "\037\043\042\005\043\036\046\046\051\034\052\030\053" +
    "\032\054\044\001\002\000\042\015\022\021\010\022\007" +
    "\026\013\030\037\032\041\036\016\037\043\042\005\043" +
    "\036\046\046\051\034\052\030\053\032\054\044\063\357" +
    "\001\002\000\072\004\uffb7\015\uffb7\016\uffb7\021\uffb7\022" +
    "\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\056\uffb7\060\uffb7\061\uffb7" +
    "\065\uffb7\066\uffb7\074\uffb7\120\uffb7\001\002\000\004\002" +
    "\001\001\002\000\062\002\000\004\000\015\000\016\000" +
    "\021\000\022\000\026\000\030\000\031\000\032\000\036" +
    "\000\037\000\040\000\042\000\043\000\045\000\046\000" +
    "\050\000\051\000\052\000\053\000\054\000\060\000\074" +
    "\000\001\002\000\074\004\uffa3\015\uffa3\016\uffa3\021\uffa3" +
    "\022\uffa3\026\uffa3\030\uffa3\031\uffa3\032\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3\060\uffa3\061" +
    "\uffa3\062\374\065\uffa3\066\uffa3\074\uffa3\120\uffa3\001\002" +
    "\000\004\004\364\001\002\000\010\063\uffa0\065\uffa0\121" +
    "\372\001\002\000\006\063\370\065\367\001\002\000\006" +
    "\063\uffa2\065\uffa2\001\002\000\004\004\364\001\002\000" +
    "\072\004\uffa4\015\uffa4\016\uffa4\021\uffa4\022\uffa4\026\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\036\uffa4\037\uffa4\040\uffa4\042" +
    "\uffa4\043\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\056\uffa4\060\uffa4\061\uffa4\065\uffa4\066" +
    "\uffa4\074\uffa4\120\uffa4\001\002\000\006\063\uffa1\065\uffa1" +
    "\001\002\000\050\004\076\005\115\006\123\007\103\010" +
    "\113\011\125\012\124\013\116\014\127\044\065\060\074" +
    "\071\104\072\117\073\126\074\070\075\114\076\101\077" +
    "\100\100\071\001\002\000\006\063\uff9f\065\uff9f\001\002" +
    "\000\004\004\364\001\002\000\006\063\376\065\367\001" +
    "\002\000\072\004\uffa5\015\uffa5\016\uffa5\021\uffa5\022\uffa5" +
    "\026\uffa5\030\uffa5\031\uffa5\032\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\042\uffa5\043\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\056\uffa5\060\uffa5\061\uffa5\065" +
    "\uffa5\066\uffa5\074\uffa5\120\uffa5\001\002\000\020\004\uffee" +
    "\056\uffee\060\uffee\061\uffee\065\uffee\066\uffee\074\uffee\001" +
    "\002\000\074\004\uffb2\015\uffb2\016\uffb2\021\uffb2\022\uffb2" +
    "\026\uffb2\030\uffb2\031\uffb2\032\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\056\uffb2\060\uffb2\061\uffb2\062" +
    "\u0104\065\uffb2\066\uffb2\074\uffb2\120\uffb2\001\002\000\040" +
    "\015\022\021\010\022\007\026\013\030\037\032\041\036" +
    "\016\037\043\042\005\043\036\046\046\051\034\052\030" +
    "\053\032\054\044\001\002\000\042\015\022\021\010\022" +
    "\007\026\013\030\037\032\041\036\016\037\043\042\005" +
    "\043\036\046\046\051\034\052\030\053\032\054\044\063" +
    "\u0103\001\002\000\072\004\uffb3\015\uffb3\016\uffb3\021\uffb3" +
    "\022\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\056\uffb3\060\uffb3\061" +
    "\uffb3\065\uffb3\066\uffb3\074\uffb3\120\uffb3\001\002\000\040" +
    "\015\022\021\010\022\007\026\013\030\037\032\041\036" +
    "\016\037\043\042\005\043\036\046\046\051\034\052\030" +
    "\053\032\054\044\001\002\000\042\015\022\021\010\022" +
    "\007\026\013\030\037\032\041\036\016\037\043\042\005" +
    "\043\036\046\046\051\034\052\030\053\032\054\044\063" +
    "\u0106\001\002\000\072\004\uffb4\015\uffb4\016\uffb4\021\uffb4" +
    "\022\uffb4\026\uffb4\030\uffb4\031\uffb4\032\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\042\uffb4\043\uffb4\045\uffb4\046\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\056\uffb4\060\uffb4\061" +
    "\uffb4\065\uffb4\066\uffb4\074\uffb4\120\uffb4\001\002\000\154" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\060\uffcc\062\uffcc\063\uffcc\066\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\100\uffcc\001\002\000\004\062\u011e\001\002\000\054\015" +
    "\022\016\031\021\010\022\007\026\013\030\037\031\024" +
    "\032\041\036\016\037\043\040\017\042\005\043\036\045" +
    "\021\046\046\050\025\051\034\052\030\053\032\054\044" +
    "\062\ufff8\001\002\000\012\004\026\060\014\066\u010c\074" +
    "\020\001\002\000\006\065\u0119\066\u011a\001\002\000\156" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\060\ufff3\062\ufff3\063\ufff3\066" +
    "\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\100\ufff3\001\002\000\010\065\uffea\066\uffea\121" +
    "\u010f\001\002\000\006\065\uffec\066\uffec\001\002\000\052" +
    "\004\076\005\115\006\123\007\103\010\113\011\125\012" +
    "\124\013\116\014\127\044\065\060\074\062\u0111\071\104" +
    "\072\117\073\126\074\070\075\114\076\101\077\100\100" +
    "\071\001\002\000\006\065\uffe9\066\uffe9\001\002\000\052" +
    "\004\076\005\115\006\123\007\103\010\113\011\125\012" +
    "\124\013\116\014\127\044\065\060\074\062\u0111\071\104" +
    "\072\117\073\126\074\070\075\114\076\101\077\100\100" +
    "\071\001\002\000\010\063\uff9c\065\uff9c\066\uff9c\001\002" +
    "\000\006\063\uff99\065\uff99\001\002\000\006\063\u0116\065" +
    "\u0115\001\002\000\054\004\076\005\115\006\123\007\103" +
    "\010\113\011\125\012\124\013\116\014\127\044\065\060" +
    "\074\062\u0111\063\u0118\071\104\072\117\073\126\074\070" +
    "\075\114\076\101\077\100\100\071\001\002\000\010\063" +
    "\uff9b\065\uff9b\066\uff9b\001\002\000\006\063\uff98\065\uff98" +
    "\001\002\000\010\063\uff9a\065\uff9a\066\uff9a\001\002\000" +
    "\010\004\026\060\014\074\020\001\002\000\156\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\060\ufff4\062\ufff4\063\ufff4\066\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4" +
    "\100\ufff4\001\002\000\006\065\uffeb\066\uffeb\001\002\000" +
    "\154\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\060\uffcb\062\uffcb\063\uffcb\066\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\001\002\000\004\062\u011e\001\002\000\154" +
    "\004\u0135\005\115\006\123\007\103\010\113\011\125\012" +
    "\124\013\116\014\127\015\022\016\031\017\u012c\020\u0136" +
    "\021\010\022\007\023\u0133\024\u012e\025\u0128\026\013\030" +
    "\037\031\024\032\041\033\u0127\034\u0124\035\u0134\036\016" +
    "\037\043\040\017\041\u012a\042\005\043\036\044\065\045" +
    "\021\046\046\047\u0126\050\025\051\034\052\030\053\032" +
    "\054\044\055\u0125\060\074\062\uff88\063\u0122\066\u012d\071" +
    "\104\072\117\073\126\074\070\075\114\076\101\077\100" +
    "\100\071\001\002\000\062\002\ufff7\004\ufff7\015\ufff7\016" +
    "\ufff7\021\ufff7\022\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7\045\ufff7\046" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\060\ufff7" +
    "\074\ufff7\001\002\000\104\004\u0135\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\017\u012c" +
    "\020\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034\u0124\035" +
    "\u0134\041\u012a\044\065\047\u0126\055\u0125\060\074\062\uff88" +
    "\063\u0168\066\u012d\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\106\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\017\uff83\020\uff83\023\uff83\024\uff83\025\uff83" +
    "\027\uff83\033\uff83\034\uff83\035\uff83\041\uff83\044\uff83\047" +
    "\uff83\055\uff83\060\uff83\062\uff83\063\uff83\066\uff83\071\uff83" +
    "\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100" +
    "\uff83\001\002\000\160\002\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\060\uffcd\062\uffcd\063\uffcd\066\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\001\002" +
    "\000\004\062\u011e\001\002\000\004\004\u0165\001\002\000" +
    "\004\060\u0161\001\002\000\004\060\u015d\001\002\000\004" +
    "\060\u0155\001\002\000\102\004\u0135\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\017\u012c" +
    "\020\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034\u0124\035" +
    "\u0134\041\u012a\044\065\047\u0126\055\u0125\060\074\062\uff88" +
    "\066\u012d\071\104\072\117\073\126\074\070\075\114\076" +
    "\101\077\100\100\071\001\002\000\106\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014" +
    "\uff84\017\uff84\020\uff84\023\uff84\024\uff84\025\uff84\027\uff84" +
    "\033\uff84\034\uff84\035\uff84\041\uff84\044\uff84\047\uff84\055" +
    "\uff84\060\uff84\062\uff84\063\uff84\066\uff84\071\uff84\072\uff84" +
    "\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\001" +
    "\002\000\052\004\076\005\115\006\123\007\103\010\113" +
    "\011\125\012\124\013\116\014\127\044\065\060\074\066" +
    "\u014c\071\104\072\117\073\126\074\070\075\114\076\101" +
    "\077\100\100\071\001\002\000\106\004\uff86\005\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86" +
    "\017\uff86\020\uff86\023\uff86\024\uff86\025\uff86\027\uff86\033" +
    "\uff86\034\uff86\035\uff86\041\uff86\044\uff86\047\uff86\055\uff86" +
    "\060\uff86\062\uff86\063\uff86\066\uff86\071\uff86\072\uff86\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\001\002" +
    "\000\004\066\u014b\001\002\000\110\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e" +
    "\017\uff7e\020\uff7e\023\uff7e\024\uff7e\025\uff7e\027\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\041\uff7e\044\uff7e\047\uff7e\055\uff7e" +
    "\060\uff7e\061\uff7e\062\uff7e\063\uff7e\066\uff7e\071\uff7e\072" +
    "\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e" +
    "\001\002\000\004\120\u0149\001\002\000\154\004\u0135\005" +
    "\115\006\123\007\103\010\113\011\125\012\124\013\116" +
    "\014\127\015\022\016\031\017\u012c\020\u0136\021\010\022" +
    "\007\023\u0133\024\u012e\025\u0128\026\013\030\037\031\024" +
    "\032\041\033\u0127\034\u0124\035\u0134\036\016\037\043\040" +
    "\017\041\u012a\042\005\043\036\044\065\045\021\046\046" +
    "\047\u0126\050\025\051\034\052\030\053\032\054\044\055" +
    "\u0125\060\074\062\uff88\063\u0146\066\u012d\071\104\072\117" +
    "\073\126\074\070\075\114\076\101\077\100\100\071\001" +
    "\002\000\006\065\162\066\u0144\001\002\000\106\004\uff85" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013" +
    "\uff85\014\uff85\017\uff85\020\uff85\023\uff85\024\uff85\025\uff85" +
    "\027\uff85\033\uff85\034\uff85\035\uff85\041\uff85\044\uff85\047" +
    "\uff85\055\uff85\060\uff85\062\uff85\063\uff85\066\uff85\071\uff85" +
    "\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100" +
    "\uff85\001\002\000\106\004\uff89\005\uff89\006\uff89\007\uff89" +
    "\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\017\uff89\020" +
    "\uff89\023\uff89\024\uff89\025\uff89\027\uff89\033\uff89\034\uff89" +
    "\035\uff89\041\uff89\044\uff89\047\uff89\055\uff89\060\uff89\062" +
    "\uff89\063\uff89\066\uff89\071\uff89\072\uff89\073\uff89\074\uff89" +
    "\075\uff89\076\uff89\077\uff89\100\uff89\001\002\000\004\066" +
    "\u0143\001\002\000\004\060\u013d\001\002\000\120\056\uff2c" +
    "\060\uff2c\064\uff2c\065\uff2c\066\uff2c\070\uff2c\071\uff2c\072" +
    "\uff2c\073\uff2c\074\uff2c\075\uff2c\076\uff2c\101\uff2c\102\uff2c" +
    "\103\uff2c\104\uff2c\105\uff2c\106\uff2c\107\uff2c\110\uff2c\111" +
    "\uff2c\112\uff2c\113\uff2c\114\uff2c\115\uff2c\116\uff2c\117\uff2c" +
    "\120\u013b\121\uff2c\122\uff2c\123\uff2c\124\uff2c\125\uff2c\126" +
    "\uff2c\127\uff2c\130\uff2c\131\uff2c\132\uff2c\133\uff2c\001\002" +
    "\000\050\004\076\005\115\006\123\007\103\010\113\011" +
    "\125\012\124\013\116\014\127\044\065\060\074\071\104" +
    "\072\117\073\126\074\070\075\114\076\101\077\100\100" +
    "\071\001\002\000\104\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\017\uffca\020" +
    "\uffca\023\uffca\024\uffca\025\uffca\033\uffca\034\uffca\035\uffca" +
    "\041\uffca\044\uffca\047\uffca\055\uffca\060\uffca\062\uffca\063" +
    "\uffca\066\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\100\uffca\001\002\000\004\120\u0139\001" +
    "\002\000\102\004\u0135\005\115\006\123\007\103\010\113" +
    "\011\125\012\124\013\116\014\127\017\u012c\020\u0136\023" +
    "\u0133\024\u012e\025\u0128\033\u0127\034\u0124\035\u0134\041\u012a" +
    "\044\065\047\u0126\055\u0125\060\074\062\uff88\066\u012d\071" +
    "\104\072\117\073\126\074\070\075\114\076\101\077\100" +
    "\100\071\001\002\000\106\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\017\uff81" +
    "\020\uff81\023\uff81\024\uff81\025\uff81\027\uff81\033\uff81\034" +
    "\uff81\035\uff81\041\uff81\044\uff81\047\uff81\055\uff81\060\uff81" +
    "\062\uff81\063\uff81\066\uff81\071\uff81\072\uff81\073\uff81\074" +
    "\uff81\075\uff81\076\uff81\077\uff81\100\uff81\001\002\000\102" +
    "\004\u0135\005\115\006\123\007\103\010\113\011\125\012" +
    "\124\013\116\014\127\017\u012c\020\u0136\023\u0133\024\u012e" +
    "\025\u0128\033\u0127\034\u0124\035\u0134\041\u012a\044\065\047" +
    "\u0126\055\u0125\060\074\062\uff88\066\u012d\071\104\072\117" +
    "\073\126\074\070\075\114\076\101\077\100\100\071\001" +
    "\002\000\106\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\017\uff82\020\uff82\023" +
    "\uff82\024\uff82\025\uff82\027\uff82\033\uff82\034\uff82\035\uff82" +
    "\041\uff82\044\uff82\047\uff82\055\uff82\060\uff82\062\uff82\063" +
    "\uff82\066\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82" +
    "\076\uff82\077\uff82\100\uff82\001\002\000\050\004\076\005" +
    "\115\006\123\007\103\010\113\011\125\012\124\013\116" +
    "\014\127\044\065\060\074\071\104\072\117\073\126\074" +
    "\070\075\114\076\101\077\100\100\071\001\002\000\006" +
    "\061\u013f\065\162\001\002\000\102\004\u0135\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\017\u012c\020\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034" +
    "\u0124\035\u0134\041\u012a\044\065\047\u0126\055\u0125\060\074" +
    "\062\uff88\066\u012d\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\106\004\uff7d" +
    "\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\017\uff7d\020\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\027\u0141\033\uff7d\034\uff7d\035\uff7d\041\uff7d\044\uff7d\047" +
    "\uff7d\055\uff7d\060\uff7d\062\uff7d\063\uff7d\066\uff7d\071\uff7d" +
    "\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100" +
    "\uff7d\001\002\000\102\004\u0135\005\115\006\123\007\103" +
    "\010\113\011\125\012\124\013\116\014\127\017\u012c\020" +
    "\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034\u0124\035\u0134" +
    "\041\u012a\044\065\047\u0126\055\u0125\060\074\062\uff88\066" +
    "\u012d\071\104\072\117\073\126\074\070\075\114\076\101" +
    "\077\100\100\071\001\002\000\106\004\uff7c\005\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\017\uff7c\020\uff7c\023\uff7c\024\uff7c\025\uff7c\027\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\041\uff7c\044\uff7c\047\uff7c\055\uff7c" +
    "\060\uff7c\062\uff7c\063\uff7c\066\uff7c\071\uff7c\072\uff7c\073" +
    "\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\001\002" +
    "\000\106\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011" +
    "\uff75\012\uff75\013\uff75\014\uff75\017\uff75\020\uff75\023\uff75" +
    "\024\uff75\025\uff75\027\uff75\033\uff75\034\uff75\035\uff75\041" +
    "\uff75\044\uff75\047\uff75\055\uff75\060\uff75\062\uff75\063\uff75" +
    "\066\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076" +
    "\uff75\077\uff75\100\uff75\001\002\000\110\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\017\uff7f\020\uff7f\023\uff7f\024\uff7f\025\uff7f\027\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\041\uff7f\044\uff7f\047\uff7f\055" +
    "\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\066\uff7f\071\uff7f" +
    "\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100" +
    "\uff7f\001\002\000\104\004\u0135\005\115\006\123\007\103" +
    "\010\113\011\125\012\124\013\116\014\127\017\u012c\020" +
    "\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034\u0124\035\u0134" +
    "\041\u012a\044\065\047\u0126\055\u0125\060\074\062\uff88\063" +
    "\u0148\066\u012d\071\104\072\117\073\126\074\070\075\114" +
    "\076\101\077\100\100\071\001\002\000\160\002\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\060\uffcf\062\uffcf\063\uffcf\066\uffcf" +
    "\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\001\002\000\104\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\017" +
    "\uffc9\020\uffc9\023\uffc9\024\uffc9\025\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\041\uffc9\044\uffc9\047\uffc9\055\uffc9\060\uffc9\062" +
    "\uffc9\063\uffc9\066\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\100\uffc9\001\002\000\160\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\060\uffd0\062\uffd0\063\uffd0" +
    "\066\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\100\uffd0\001\002\000\102\004\u0135\005\115" +
    "\006\123\007\103\010\113\011\125\012\124\013\116\014" +
    "\127\017\u012c\020\u0136\023\u0133\024\u012e\025\u0128\033\u0127" +
    "\034\u0124\035\u0134\041\u012a\044\065\047\u0126\055\u0125\060" +
    "\074\062\uff88\066\u012d\071\104\072\117\073\126\074\070" +
    "\075\114\076\101\077\100\100\071\001\002\000\106\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80" +
    "\013\uff80\014\uff80\017\uff80\020\uff80\023\uff80\024\uff80\025" +
    "\uff80\027\uff80\033\uff80\034\uff80\035\uff80\041\uff80\044\uff80" +
    "\047\uff80\055\uff80\060\uff80\062\uff80\063\uff80\066\uff80\071" +
    "\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80" +
    "\100\uff80\001\002\000\106\004\uff74\005\uff74\006\uff74\007" +
    "\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\017\uff74" +
    "\020\uff74\023\uff74\024\uff74\025\uff74\027\uff74\033\uff74\034" +
    "\uff74\035\uff74\041\uff74\044\uff74\047\uff74\055\uff74\060\uff74" +
    "\062\uff74\063\uff74\066\uff74\071\uff74\072\uff74\073\uff74\074" +
    "\uff74\075\uff74\076\uff74\077\uff74\100\uff74\001\002\000\106" +
    "\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012" +
    "\uff72\013\uff72\014\uff72\017\uff72\020\uff72\023\uff72\024\uff72" +
    "\025\uff72\027\uff72\033\uff72\034\uff72\035\uff72\041\uff72\044" +
    "\uff72\047\uff72\055\uff72\060\uff72\062\uff72\063\uff72\066\uff72" +
    "\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72\077" +
    "\uff72\100\uff72\001\002\000\006\065\162\066\u014e\001\002" +
    "\000\106\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011" +
    "\uff73\012\uff73\013\uff73\014\uff73\017\uff73\020\uff73\023\uff73" +
    "\024\uff73\025\uff73\027\uff73\033\uff73\034\uff73\035\uff73\041" +
    "\uff73\044\uff73\047\uff73\055\uff73\060\uff73\062\uff73\063\uff73" +
    "\066\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73\076" +
    "\uff73\077\uff73\100\uff73\001\002\000\004\055\u0150\001\002" +
    "\000\004\060\u0151\001\002\000\050\004\076\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\044\065\060\074\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\006\061\u0153" +
    "\065\162\001\002\000\004\066\u0154\001\002\000\106\004" +
    "\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79" +
    "\013\uff79\014\uff79\017\uff79\020\uff79\023\uff79\024\uff79\025" +
    "\uff79\027\uff79\033\uff79\034\uff79\035\uff79\041\uff79\044\uff79" +
    "\047\uff79\055\uff79\060\uff79\062\uff79\063\uff79\066\uff79\071" +
    "\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077\uff79" +
    "\100\uff79\001\002\000\052\004\076\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\044\065" +
    "\060\074\066\u012d\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\052\004\076" +
    "\005\115\006\123\007\103\010\113\011\125\012\124\013" +
    "\116\014\127\044\065\060\074\066\u012d\071\104\072\117" +
    "\073\126\074\070\075\114\076\101\077\100\100\071\001" +
    "\002\000\052\004\076\005\115\006\123\007\103\010\113" +
    "\011\125\012\124\013\116\014\127\044\065\060\074\061" +
    "\u0158\071\104\072\117\073\126\074\070\075\114\076\101" +
    "\077\100\100\071\001\002\000\102\004\u0135\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\017\u012c\020\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034" +
    "\u0124\035\u0134\041\u012a\044\065\047\u0126\055\u0125\060\074" +
    "\062\uff88\066\u012d\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\006\061\u015a" +
    "\065\162\001\002\000\102\004\u0135\005\115\006\123\007" +
    "\103\010\113\011\125\012\124\013\116\014\127\017\u012c" +
    "\020\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034\u0124\035" +
    "\u0134\041\u012a\044\065\047\u0126\055\u0125\060\074\062\uff88" +
    "\066\u012d\071\104\072\117\073\126\074\070\075\114\076" +
    "\101\077\100\100\071\001\002\000\106\004\uff78\005\uff78" +
    "\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78\014" +
    "\uff78\017\uff78\020\uff78\023\uff78\024\uff78\025\uff78\027\uff78" +
    "\033\uff78\034\uff78\035\uff78\041\uff78\044\uff78\047\uff78\055" +
    "\uff78\060\uff78\062\uff78\063\uff78\066\uff78\071\uff78\072\uff78" +
    "\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\001" +
    "\002\000\106\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77" +
    "\011\uff77\012\uff77\013\uff77\014\uff77\017\uff77\020\uff77\023" +
    "\uff77\024\uff77\025\uff77\027\uff77\033\uff77\034\uff77\035\uff77" +
    "\041\uff77\044\uff77\047\uff77\055\uff77\060\uff77\062\uff77\063" +
    "\uff77\066\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77" +
    "\076\uff77\077\uff77\100\uff77\001\002\000\050\004\076\005" +
    "\115\006\123\007\103\010\113\011\125\012\124\013\116" +
    "\014\127\044\065\060\074\071\104\072\117\073\126\074" +
    "\070\075\114\076\101\077\100\100\071\001\002\000\006" +
    "\061\u015f\065\162\001\002\000\102\004\u0135\005\115\006" +
    "\123\007\103\010\113\011\125\012\124\013\116\014\127" +
    "\017\u012c\020\u0136\023\u0133\024\u012e\025\u0128\033\u0127\034" +
    "\u0124\035\u0134\041\u012a\044\065\047\u0126\055\u0125\060\074" +
    "\062\uff88\066\u012d\071\104\072\117\073\126\074\070\075" +
    "\114\076\101\077\100\100\071\001\002\000\106\004\uff7b" +
    "\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013" +
    "\uff7b\014\uff7b\017\uff7b\020\uff7b\023\uff7b\024\uff7b\025\uff7b" +
    "\027\uff7b\033\uff7b\034\uff7b\035\uff7b\041\uff7b\044\uff7b\047" +
    "\uff7b\055\uff7b\060\uff7b\062\uff7b\063\uff7b\066\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100" +
    "\uff7b\001\002\000\050\004\076\005\115\006\123\007\103" +
    "\010\113\011\125\012\124\013\116\014\127\044\065\060" +
    "\074\071\104\072\117\073\126\074\070\075\114\076\101" +
    "\077\100\100\071\001\002\000\006\061\u0163\065\162\001" +
    "\002\000\102\004\u0135\005\115\006\123\007\103\010\113" +
    "\011\125\012\124\013\116\014\127\017\u012c\020\u0136\023" +
    "\u0133\024\u012e\025\u0128\033\u0127\034\u0124\035\u0134\041\u012a" +
    "\044\065\047\u0126\055\u0125\060\074\062\uff88\066\u012d\071" +
    "\104\072\117\073\126\074\070\075\114\076\101\077\100" +
    "\100\071\001\002\000\106\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\017\uff7a" +
    "\020\uff7a\023\uff7a\024\uff7a\025\uff7a\027\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\041\uff7a\044\uff7a\047\uff7a\055\uff7a\060\uff7a" +
    "\062\uff7a\063\uff7a\066\uff7a\071\uff7a\072\uff7a\073\uff7a\074" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\001\002\000\004" +
    "\066\u0166\001\002\000\106\004\uff76\005\uff76\006\uff76\007" +
    "\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\017\uff76" +
    "\020\uff76\023\uff76\024\uff76\025\uff76\027\uff76\033\uff76\034" +
    "\uff76\035\uff76\041\uff76\044\uff76\047\uff76\055\uff76\060\uff76" +
    "\062\uff76\063\uff76\066\uff76\071\uff76\072\uff76\073\uff76\074" +
    "\uff76\075\uff76\076\uff76\077\uff76\100\uff76\001\002\000\106" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\017\uff87\020\uff87\023\uff87\024\uff87" +
    "\025\uff87\027\uff87\033\uff87\034\uff87\035\uff87\041\uff87\044" +
    "\uff87\047\uff87\055\uff87\060\uff87\062\uff87\063\uff87\066\uff87" +
    "\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077" +
    "\uff87\100\uff87\001\002\000\160\002\uffce\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\060\uffce\062\uffce\063\uffce\066\uffce\071\uffce\072" +
    "\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce" +
    "\001\002\000\062\002\ufff5\004\ufff5\015\ufff5\016\ufff5\021" +
    "\ufff5\022\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\060\ufff5\074\ufff5" +
    "\001\002\000\020\004\ufff0\056\ufff0\060\ufff0\061\ufff0\065" +
    "\ufff0\066\ufff0\074\ufff0\001\002\000\022\004\uffda\022\uffda" +
    "\054\uffda\056\uffda\060\uffda\061\uffda\065\uffda\074\uffda\001" +
    "\002\000\022\004\uffde\022\007\054\044\056\uffde\060\uffde" +
    "\061\uffde\065\uffde\074\020\001\002\000\014\004\uffdd\056" +
    "\uffdd\060\uffdd\061\uffdd\065\uffdd\001\002\000\022\004\uffdb" +
    "\022\uffdb\054\uffdb\056\uffdb\060\uffdb\061\uffdb\065\uffdb\074" +
    "\uffdb\001\002\000\014\004\uffdf\056\uffdf\060\uffdf\061\uffdf" +
    "\065\uffdf\001\002\000\062\015\022\016\031\021\010\022" +
    "\007\026\013\030\037\031\024\032\041\036\016\037\043" +
    "\040\017\042\005\043\036\045\021\046\046\050\025\051" +
    "\034\052\030\053\032\054\044\062\ufffa\065\uffea\066\uffea" +
    "\121\u010f\001\002\000\004\062\u011e\001\002\000\054\015" +
    "\022\016\031\021\010\022\007\026\013\030\037\031\024" +
    "\032\041\036\016\037\043\040\017\042\005\043\036\045" +
    "\021\046\046\050\025\051\034\052\030\053\032\054\044" +
    "\062\ufffc\001\002\000\004\062\u011e\001\002\000\062\002" +
    "\ufffb\004\ufffb\015\ufffb\016\ufffb\021\ufffb\022\ufffb\026\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\036\ufffb\037\ufffb\040\ufffb\042" +
    "\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\060\ufffb\074\ufffb\001\002\000\062\002" +
    "\ufff9\004\ufff9\015\ufff9\016\ufff9\021\ufff9\022\ufff9\026\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\036\ufff9\037\ufff9\040\ufff9\042" +
    "\ufff9\043\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\060\ufff9\074\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\034\013\041\014\037\015\014\017\044\024" +
    "\022\026\003\027\046\030\032\031\011\047\026\050\005" +
    "\051\010\052\034\001\001\000\014\020\u010a\021\u010d\024" +
    "\022\030\u016f\031\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\022" +
    "\030\300\031\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\u016c\045\u016b\052\u016a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\u0169\027\046\047\026\050\005\051" +
    "\010\052\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\u0108\017\u0106\026\u0109\027" +
    "\046\047\026\050\005\051\010\052\034\102\u0107\001\001" +
    "\000\002\001\001\000\016\026\376\027\046\047\026\050" +
    "\005\051\010\052\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\360\015\014\017\044\024\022\026\003\027\046\030\032" +
    "\031\011\047\026\050\005\051\010\052\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\047\027\046\047\026\050\005\051" +
    "\010\052\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\041\053\042\054\046\056\047\052\050\005\051" +
    "\010\052\055\001\001\000\014\046\353\047\052\050\005" +
    "\051\010\052\055\001\001\000\016\042\352\046\056\047" +
    "\052\050\005\051\010\052\055\001\001\000\002\001\001" +
    "\000\014\046\350\047\052\050\005\051\010\052\055\001" +
    "\001\000\014\024\022\030\062\031\011\043\061\044\060" +
    "\001\001\000\042\054\347\056\074\057\117\060\111\061" +
    "\105\062\104\063\072\064\110\065\107\066\076\067\106" +
    "\070\121\071\071\072\101\073\066\074\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\054\120\056\074\057\117\060\111\061\105\062\104\063" +
    "\072\064\110\065\107\066\076\067\106\070\121\071\071" +
    "\072\101\073\066\074\065\001\001\000\010\071\340\072" +
    "\101\074\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\071\071\072\101\073\337\074\065\001\001\000" +
    "\012\071\071\072\101\073\336\074\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\002\252\046\253\047" +
    "\052\050\005\051\010\052\055\053\224\055\143\056\142" +
    "\057\117\060\111\061\105\062\104\063\072\064\110\065" +
    "\107\066\076\067\106\070\121\071\141\072\101\073\066" +
    "\074\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\071\071\072\101\073\251\074\065" +
    "\001\001\000\012\071\071\072\101\073\250\074\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\071\227" +
    "\072\101\074\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\071\071\072" +
    "\101\073\226\074\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\071\222\072\101\074\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\071" +
    "\071\072\101\073\127\074\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\071\071\072\101\073\135\074" +
    "\065\001\001\000\012\071\071\072\101\073\134\074\065" +
    "\001\001\000\012\071\071\072\101\073\133\074\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\060\165\061\105\062\104\063\072\064\110\065" +
    "\107\066\076\067\106\070\121\071\071\072\101\073\066" +
    "\074\065\001\001\000\044\053\140\055\143\056\142\057" +
    "\117\060\111\061\105\062\104\063\072\064\110\065\107" +
    "\066\076\067\106\070\121\071\141\072\101\073\066\074" +
    "\065\001\001\000\002\001\001\000\004\076\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\055\160\056\142\057\117\060\111\061\105" +
    "\062\104\063\072\064\110\065\107\066\076\067\106\070" +
    "\121\071\141\072\101\073\066\074\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\055\164\056\142\057\117\060\111\061\105" +
    "\062\104\063\072\064\110\065\107\066\076\067\106\070" +
    "\121\071\141\072\101\073\066\074\065\001\001\000\040" +
    "\056\163\057\117\060\111\061\105\062\104\063\072\064" +
    "\110\065\107\066\076\067\106\070\121\071\071\072\101" +
    "\073\066\074\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\061\167\062\104\063\072" +
    "\064\110\065\107\066\076\067\106\070\121\071\071\072" +
    "\101\073\066\074\065\001\001\000\002\001\001\000\030" +
    "\062\171\063\072\064\110\065\107\066\076\067\106\070" +
    "\121\071\071\072\101\073\066\074\065\001\001\000\002" +
    "\001\001\000\026\063\173\064\110\065\107\066\076\067" +
    "\106\070\121\071\071\072\101\073\066\074\065\001\001" +
    "\000\002\001\001\000\024\064\175\065\107\066\076\067" +
    "\106\070\121\071\071\072\101\073\066\074\065\001\001" +
    "\000\002\001\001\000\022\065\221\066\076\067\106\070" +
    "\121\071\071\072\101\073\066\074\065\001\001\000\022" +
    "\065\200\066\076\067\106\070\121\071\071\072\101\073" +
    "\066\074\065\001\001\000\002\001\001\000\020\066\220" +
    "\067\106\070\121\071\071\072\101\073\066\074\065\001" +
    "\001\000\020\066\217\067\106\070\121\071\071\072\101" +
    "\073\066\074\065\001\001\000\020\066\216\067\106\070" +
    "\121\071\071\072\101\073\066\074\065\001\001\000\020" +
    "\066\205\067\106\070\121\071\071\072\101\073\066\074" +
    "\065\001\001\000\002\001\001\000\016\067\215\070\121" +
    "\071\071\072\101\073\066\074\065\001\001\000\016\067" +
    "\210\070\121\071\071\072\101\073\066\074\065\001\001" +
    "\000\002\001\001\000\014\070\214\071\071\072\101\073" +
    "\066\074\065\001\001\000\014\070\213\071\071\072\101" +
    "\073\066\074\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\053\224\055\143\056\142\057\117\060\111\061\105" +
    "\062\104\063\072\064\110\065\107\066\076\067\106\070" +
    "\121\071\141\072\101\073\066\074\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\053\245" +
    "\055\143\056\142\057\117\060\111\061\105\062\104\063" +
    "\072\064\110\065\107\066\076\067\106\070\121\071\141" +
    "\072\101\073\066\074\065\001\001\000\002\001\001\000" +
    "\044\055\241\056\142\057\117\060\111\061\105\062\104" +
    "\063\072\064\110\065\107\066\076\067\106\070\121\071" +
    "\141\072\101\073\066\074\065\075\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\055\244\056\142\057\117" +
    "\060\111\061\105\062\104\063\072\064\110\065\107\066" +
    "\076\067\106\070\121\071\141\072\101\073\066\074\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\260\032" +
    "\254\033\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\054\331\056\074\057\117\060\111\061\105\062" +
    "\104\063\072\064\110\065\107\066\076\067\106\070\121" +
    "\071\071\072\101\073\066\074\065\001\001\000\032\024" +
    "\260\026\270\027\046\032\277\033\255\034\276\035\266" +
    "\036\267\047\026\050\005\051\010\052\034\001\001\000" +
    "\004\033\261\001\001\000\002\001\001\000\042\054\326" +
    "\056\074\057\117\060\111\061\105\062\104\063\072\064" +
    "\110\065\107\066\076\067\106\070\121\071\071\072\101" +
    "\073\066\074\065\001\001\000\024\026\270\027\046\034" +
    "\264\035\266\036\267\047\026\050\005\051\010\052\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\271\030\273\031\011" +
    "\032\272\033\255\001\001\000\006\031\304\033\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\024\271" +
    "\026\270\027\046\030\300\031\011\032\277\033\255\034" +
    "\276\035\266\036\267\047\026\050\005\051\010\052\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\054\317\056" +
    "\074\057\117\060\111\061\105\062\104\063\072\064\110" +
    "\065\107\066\076\067\106\070\121\071\071\072\101\073" +
    "\066\074\065\001\001\000\026\025\312\026\270\027\046" +
    "\034\307\035\266\036\267\047\026\050\005\051\010\052" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\026\270\027" +
    "\046\036\324\047\026\050\005\051\010\052\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\071" +
    "\071\072\101\073\335\074\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\342\046\253\047\052\050\005\051\010\052\055" +
    "\053\224\055\143\056\142\057\117\060\111\061\105\062" +
    "\104\063\072\064\110\065\107\066\076\067\106\070\121" +
    "\071\141\072\101\073\066\074\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\022\030\062\031\011" +
    "\044\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\041\355\042\054\046" +
    "\056\047\052\050\005\051\010\052\055\001\001\000\016" +
    "\042\352\046\056\047\052\050\005\051\010\052\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\364\040\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\054\372\056\074\057\117\060\111\061\105\062\104" +
    "\063\072\064\110\065\107\066\076\067\106\070\121\071" +
    "\071\072\101\073\066\074\065\001\001\000\002\001\001" +
    "\000\006\037\374\040\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\041\u0101\042\054\046\056\047\052\050\005\051\010\052" +
    "\055\001\001\000\016\042\352\046\056\047\052\050\005" +
    "\051\010\052\055\001\001\000\002\001\001\000\020\041" +
    "\u0104\042\054\046\056\047\052\050\005\051\010\052\055" +
    "\001\001\000\016\042\352\046\056\047\052\050\005\051" +
    "\010\052\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0168\001\001\000\022\017\u011b\026\u0109\027" +
    "\046\047\026\050\005\051\010\052\034\101\u011c\001\001" +
    "\000\014\020\u010a\021\u010d\024\022\030\u010c\031\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\023\u010f\055\u0111\056\142\057" +
    "\117\060\111\061\105\062\104\063\072\064\110\065\107" +
    "\066\076\067\106\070\121\071\141\072\101\073\066\074" +
    "\065\001\001\000\002\001\001\000\046\022\u0113\023\u0112" +
    "\055\u0111\056\142\057\117\060\111\061\105\062\104\063" +
    "\072\064\110\065\107\066\076\067\106\070\121\071\141" +
    "\072\101\073\066\074\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\023\u0116\055\u0111" +
    "\056\142\057\117\060\111\061\105\062\104\063\072\064" +
    "\110\065\107\066\076\067\106\070\121\071\141\072\101" +
    "\073\066\074\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\u011a\024\022\030\u010c" +
    "\031\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u011e\001\001\000\104\003\u011f" +
    "\004\u0136\005\u0131\006\u0130\007\u0128\010\u0120\011\u012a\016" +
    "\u012e\017\u0106\026\u0109\027\046\047\026\050\005\051\010" +
    "\052\034\053\u012f\055\143\056\142\057\117\060\111\061" +
    "\105\062\104\063\072\064\110\065\107\066\076\067\106" +
    "\070\121\071\141\072\101\073\066\074\065\103\u0122\001" +
    "\001\000\002\001\001\000\062\004\u0146\005\u0131\006\u0130" +
    "\007\u0128\010\u0120\011\u012a\053\u012f\055\143\056\142\057" +
    "\117\060\111\061\105\062\104\063\072\064\110\065\107" +
    "\066\076\067\106\070\121\071\141\072\101\073\066\074" +
    "\065\103\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\u014e" +
    "\005\u0131\006\u0130\007\u0128\010\u0120\011\u012a\053\u012f\055" +
    "\143\056\142\057\117\060\111\061\105\062\104\063\072" +
    "\064\110\065\107\066\076\067\106\070\121\071\141\072" +
    "\101\073\066\074\065\103\u0122\001\001\000\002\001\001" +
    "\000\044\053\u014c\055\143\056\142\057\117\060\111\061" +
    "\105\062\104\063\072\064\110\065\107\066\076\067\106" +
    "\070\121\071\141\072\101\073\066\074\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\003\u0144\004\u0136\005\u0131\006\u0130\007" +
    "\u0128\010\u0120\011\u012a\017\u011b\026\u0109\027\046\047\026" +
    "\050\005\051\010\052\034\053\u012f\055\143\056\142\057" +
    "\117\060\111\061\105\062\104\063\072\064\110\065\107" +
    "\066\076\067\106\070\121\071\141\072\101\073\066\074" +
    "\065\103\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\054\u0137\056\074\057\117\060\111" +
    "\061\105\062\104\063\072\064\110\065\107\066\076\067" +
    "\106\070\121\071\071\072\101\073\066\074\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\u0139\005" +
    "\u0131\006\u0130\007\u0128\010\u0120\011\u012a\053\u012f\055\143" +
    "\056\142\057\117\060\111\061\105\062\104\063\072\064" +
    "\110\065\107\066\076\067\106\070\121\071\141\072\101" +
    "\073\066\074\065\103\u0122\001\001\000\002\001\001\000" +
    "\062\004\u013b\005\u0131\006\u0130\007\u0128\010\u0120\011\u012a" +
    "\053\u012f\055\143\056\142\057\117\060\111\061\105\062" +
    "\104\063\072\064\110\065\107\066\076\067\106\070\121" +
    "\071\141\072\101\073\066\074\065\103\u0122\001\001\000" +
    "\002\001\001\000\044\053\u013d\055\143\056\142\057\117" +
    "\060\111\061\105\062\104\063\072\064\110\065\107\066" +
    "\076\067\106\070\121\071\141\072\101\073\066\074\065" +
    "\001\001\000\002\001\001\000\062\004\u013f\005\u0131\006" +
    "\u0130\007\u0128\010\u0120\011\u012a\053\u012f\055\143\056\142" +
    "\057\117\060\111\061\105\062\104\063\072\064\110\065" +
    "\107\066\076\067\106\070\121\071\141\072\101\073\066" +
    "\074\065\103\u0122\001\001\000\002\001\001\000\062\004" +
    "\u0141\005\u0131\006\u0130\007\u0128\010\u0120\011\u012a\053\u012f" +
    "\055\143\056\142\057\117\060\111\061\105\062\104\063" +
    "\072\064\110\065\107\066\076\067\106\070\121\071\141" +
    "\072\101\073\066\074\065\103\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\u0146" +
    "\005\u0131\006\u0130\007\u0128\010\u0120\011\u012a\053\u012f\055" +
    "\143\056\142\057\117\060\111\061\105\062\104\063\072" +
    "\064\110\065\107\066\076\067\106\070\121\071\141\072" +
    "\101\073\066\074\065\103\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\u0149\005" +
    "\u0131\006\u0130\007\u0128\010\u0120\011\u012a\053\u012f\055\143" +
    "\056\142\057\117\060\111\061\105\062\104\063\072\064" +
    "\110\065\107\066\076\067\106\070\121\071\141\072\101" +
    "\073\066\074\065\103\u0122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\053" +
    "\u0151\055\143\056\142\057\117\060\111\061\105\062\104" +
    "\063\072\064\110\065\107\066\076\067\106\070\121\071" +
    "\141\072\101\073\066\074\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\011\u0155\053" +
    "\u012f\055\143\056\142\057\117\060\111\061\105\062\104" +
    "\063\072\064\110\065\107\066\076\067\106\070\121\071" +
    "\141\072\101\073\066\074\065\001\001\000\046\011\u0156" +
    "\053\u012f\055\143\056\142\057\117\060\111\061\105\062" +
    "\104\063\072\064\110\065\107\066\076\067\106\070\121" +
    "\071\141\072\101\073\066\074\065\001\001\000\044\053" +
    "\u0158\055\143\056\142\057\117\060\111\061\105\062\104" +
    "\063\072\064\110\065\107\066\076\067\106\070\121\071" +
    "\141\072\101\073\066\074\065\001\001\000\062\004\u015b" +
    "\005\u0131\006\u0130\007\u0128\010\u0120\011\u012a\053\u012f\055" +
    "\143\056\142\057\117\060\111\061\105\062\104\063\072" +
    "\064\110\065\107\066\076\067\106\070\121\071\141\072" +
    "\101\073\066\074\065\103\u0122\001\001\000\002\001\001" +
    "\000\062\004\u015a\005\u0131\006\u0130\007\u0128\010\u0120\011" +
    "\u012a\053\u012f\055\143\056\142\057\117\060\111\061\105" +
    "\062\104\063\072\064\110\065\107\066\076\067\106\070" +
    "\121\071\141\072\101\073\066\074\065\103\u0122\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\053\u015d\055" +
    "\143\056\142\057\117\060\111\061\105\062\104\063\072" +
    "\064\110\065\107\066\076\067\106\070\121\071\141\072" +
    "\101\073\066\074\065\001\001\000\002\001\001\000\062" +
    "\004\u015f\005\u0131\006\u0130\007\u0128\010\u0120\011\u012a\053" +
    "\u012f\055\143\056\142\057\117\060\111\061\105\062\104" +
    "\063\072\064\110\065\107\066\076\067\106\070\121\071" +
    "\141\072\101\073\066\074\065\103\u0122\001\001\000\002" +
    "\001\001\000\044\053\u0161\055\143\056\142\057\117\060" +
    "\111\061\105\062\104\063\072\064\110\065\107\066\076" +
    "\067\106\070\121\071\141\072\101\073\066\074\065\001" +
    "\001\000\002\001\001\000\062\004\u0163\005\u0131\006\u0130" +
    "\007\u0128\010\u0120\011\u012a\053\u012f\055\143\056\142\057" +
    "\117\060\111\061\105\062\104\063\072\064\110\065\107" +
    "\066\076\067\106\070\121\071\141\072\101\073\066\074" +
    "\065\103\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\u016e\052\u016d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\016\u0171\017\u0106\026\u0109" +
    "\027\046\047\026\050\005\051\010\052\034\100\u0170\001" +
    "\001\000\004\012\u0174\001\001\000\022\017\u011b\026\u0109" +
    "\027\046\047\026\050\005\051\010\052\034\077\u0172\001" +
    "\001\000\004\012\u0173\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$C4Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$C4Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$C4Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 /* no need to initialize */ 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


  public C4Scanner getC4Scanner() {
    return (C4Scanner) getScanner();
  }

  @Override public void syntax_error(Symbol cur_token) {
    String tokenRepr = "<unknown>";
    if (0 <= cur_token.sym) {
      tokenRepr = C4Symbols.terminalNames[cur_token.sym];
    }
    tokenRepr += ", " + cur_token.value;

    System.err.println("Syntax error at " + tokenRepr);
    report_expected_token_ids();
  }

  private static <T> Option<T> some(T t) {
    return JavaUtils.some(t);
  }

  private static <T> Option<T> none() {
    return JavaUtils.none();
  }

  private static <T, P> Tuple2<T, P> pair(T t, P p) {
    return JavaUtils.pair(t, p);
  }

  private static <A, B> Either<A, B> left(A a) {
    return JavaUtils.left(a);
  }

  private static <A, B> Either<A, B> right(B b) {
    return JavaUtils.right(b);
  }

  private static <A, B> A fst(Tuple2<A, B> x) {
    return JavaUtils.fst(x);
  }

  private static <A, B> B snd(Tuple2<A, B> x) {
    return JavaUtils.snd(x);
  }

  private static <T> Seq<T> seq() {
    return JavaUtils.seq();
  }

  private static <T> T head(Seq<T> xs) {
    return JavaUtils.head(xs);
  }

  private static <T> T last(Seq<T> xs) {
    return JavaUtils.last(xs);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$C4Parser$actions {
  private final C4Parser parser;

  /** Constructor */
  CUP$C4Parser$actions(C4Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$C4Parser$do_action_part00000000(
    int                        CUP$C4Parser$act_num,
    java_cup.runtime.lr_parser CUP$C4Parser$parser,
    java.util.Stack            CUP$C4Parser$stack,
    int                        CUP$C4Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$C4Parser$result;

      /* select the action based on the action number */
      switch (CUP$C4Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Either<Located<FunctionDef>,Located<Declaration>>>> start_val = (Seq<Located<Either<Located<FunctionDef>,Located<Declaration>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		RESULT = start_val;
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$C4Parser$parser.done_parsing();
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translation_unit ::= translation_unit external_declaration 
            {
              Seq<Located<Either<Located<FunctionDef>,Located<Declaration>>>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Either<Located<FunctionDef>,Located<Declaration>>>> xs = (Seq<Located<Either<Located<FunctionDef>,Located<Declaration>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Either<Located<FunctionDef>,Located<Declaration>>> x = (Located<Either<Located<FunctionDef>,Located<Declaration>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",9, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // translation_unit ::= external_declaration 
            {
              Seq<Located<Either<Located<FunctionDef>,Located<Declaration>>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Either<Located<FunctionDef>,Located<Declaration>>> x = (Located<Either<Located<FunctionDef>,Located<Declaration>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",9, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_declaration ::= function_definition 
            {
              Located<Either<Located<FunctionDef>,Located<Declaration>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<FunctionDef> x = (Located<FunctionDef>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x.loc(), left(x)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",10, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_declaration ::= declaration 
            {
              Located<Either<Located<FunctionDef>,Located<Declaration>>> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declaration> y = (Located<Declaration>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(y.loc(), right(y)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",10, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Located<FunctionDef> RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<Declaration>> dl = (Seq<Located<Declaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
 getC4Scanner().enterScope(); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("NT$0",61, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= declaration_specifiers declarator declaration_list NT$0 compound_statement 
            {
              Located<FunctionDef> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Located<FunctionDef>) ((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<Declaration>> dl = (Seq<Located<Declaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<CompoundStmt> body = (Located<CompoundStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 getC4Scanner().exitScope();
           RESULT = Located.of(head(dss).loc(), body.loc(),
            new FunctionDef(dss, d, some(dl), body)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Located<FunctionDef> RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
 getC4Scanner().enterScope(); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("NT$1",62, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_definition ::= declaration_specifiers declarator NT$1 compound_statement 
            {
              Located<FunctionDef> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Located<FunctionDef>) ((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<CompoundStmt> body = (Located<CompoundStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 getC4Scanner().exitScope();
           RESULT = Located.of(head(dss).loc(), body.loc(),
            new FunctionDef(dss, d, none(), body)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Located<FunctionDef> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<Declaration>> dl = (Seq<Located<Declaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
 getC4Scanner().enterScope(); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("NT$2",63, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_definition ::= declarator declaration_list NT$2 compound_statement 
            {
              Located<FunctionDef> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Located<FunctionDef>) ((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<Declaration>> dl = (Seq<Located<Declaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<CompoundStmt> body = (Located<CompoundStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 getC4Scanner().exitScope();
           RESULT = Located.of(d.loc(), body.loc(),
            new FunctionDef(JavaUtils.seq(), d, some(dl), body)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Located<FunctionDef> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
 getC4Scanner().enterScope(); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("NT$3",64, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_definition ::= declarator NT$3 compound_statement 
            {
              Located<FunctionDef> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Located<FunctionDef>) ((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<CompoundStmt> body = (Located<CompoundStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 getC4Scanner().exitScope();
           RESULT = Located.of(d.loc(), body.loc(),
            new FunctionDef(JavaUtils.seq(), d, none(), body)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= declaration_specifiers init_declarator_list SEMICOLON 
            {
              Located<Declaration> RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Tuple2<Located<Declarator>,Option<Located<Initializer>>>> ids = (Seq<Tuple2<Located<Declarator>,Option<Located<Initializer>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 JavaUtils.checkTypedef(dss, ids, getC4Scanner());
           RESULT = Located.of(head(dss).loc(), l,
            new Declaration(dss, some(ids))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= declaration_specifiers SEMICOLON 
            {
              Located<Declaration> RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(head(dss).loc(), l, new Declaration(dss, none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_specifiers ::= storage_class_specifier declaration_specifiers 
            {
              Seq<Located<DeclarationSpecifier>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<StorageClassSpecifier> x = (Located<StorageClassSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<DeclarationSpecifier>> xs = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.prepend(
            Located.of(x.loc(), last(xs).loc(),
                new DeclarationSpecifierStorageClass(x)),
            xs); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",20, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_specifiers ::= storage_class_specifier 
            {
              Seq<Located<DeclarationSpecifier>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<StorageClassSpecifier> x = (Located<StorageClassSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(
            Located.of(x.loc(),
                new DeclarationSpecifierStorageClass(x))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",20, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_specifiers ::= type_specifier declaration_specifiers 
            {
              Seq<Located<DeclarationSpecifier>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<TypeSpecifier> x = (Located<TypeSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<DeclarationSpecifier>> xs = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.prepend(
            Located.of(x.loc(), last(xs).loc(),
                new DeclarationSpecifierTypeSpecifier(x)),
            xs); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",20, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration_specifiers ::= type_specifier 
            {
              Seq<Located<DeclarationSpecifier>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeSpecifier> x = (Located<TypeSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(
            Located.of(x.loc(),
                new DeclarationSpecifierTypeSpecifier(x))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",20, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration_specifiers ::= type_qualifier declaration_specifiers 
            {
              Seq<Located<DeclarationSpecifier>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<TypeQualifier> x = (Located<TypeQualifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<DeclarationSpecifier>> xs = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.prepend(
            Located.of(x.loc(), last(xs).loc(),
                new DeclarationSpecifierTypeQualifier(x)),
            xs); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",20, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_specifiers ::= type_qualifier 
            {
              Seq<Located<DeclarationSpecifier>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeQualifier> x = (Located<TypeQualifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(
            Located.of(x.loc(),
                new DeclarationSpecifierTypeQualifier(x))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",20, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // init_declarator_list ::= init_declarator 
            {
              Seq<Tuple2<Located<Declarator>,Option<Located<Initializer>>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Tuple2<Located<Declarator>,Option<Located<Initializer>>> x = (Tuple2<Located<Declarator>,Option<Located<Initializer>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",14, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              Seq<Tuple2<Located<Declarator>,Option<Located<Initializer>>>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Tuple2<Located<Declarator>,Option<Located<Initializer>>>> xs = (Seq<Tuple2<Located<Declarator>,Option<Located<Initializer>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Tuple2<Located<Declarator>,Option<Located<Initializer>>> x = (Tuple2<Located<Declarator>,Option<Located<Initializer>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",14, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // init_declarator ::= declarator 
            {
              Tuple2<Located<Declarator>,Option<Located<Initializer>>> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(d, none()); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",15, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_declarator ::= declarator ASSIGN initializer 
            {
              Tuple2<Located<Declarator>,Option<Located<Initializer>>> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Initializer> i = (Located<Initializer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(d, some(i)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",15, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarator ::= pointer direct_declarator 
            {
              Located<Declarator> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Pointer> ptr = (Located<Pointer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<DirectDeclarator> dd = (Located<DirectDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(ptr.loc(), dd.loc(),
            new Declarator(some(ptr), dd)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declarator",22, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarator ::= direct_declarator 
            {
              Located<Declarator> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<DirectDeclarator> dd = (Located<DirectDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dd.loc(), new Declarator(none(), dd)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declarator",22, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // direct_declarator ::= ID 
            {
              Located<DirectDeclarator> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(id.loc(), new DirectDeclaratorId(id)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",23, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // direct_declarator ::= LPAREN declarator RPAREN 
            {
              Located<DirectDeclarator> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc l1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(l1, l2, new DirectDeclaratorDeclarator(d)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",23, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // direct_declarator ::= direct_declarator LSBRKT constant_expression RSBRKT 
            {
              Located<DirectDeclarator> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<DirectDeclarator> dd = (Located<DirectDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dd.loc(), loc,
            new DirectDeclaratorArray(dd, some(e))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",23, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // direct_declarator ::= direct_declarator LSBRKT RSBRKT 
            {
              Located<DirectDeclarator> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<DirectDeclarator> dd = (Located<DirectDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dd.loc(), loc,
            new DirectDeclaratorArray(dd, none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",23, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // direct_declarator ::= direct_declarator LPAREN parameter_type_list RPAREN 
            {
              Located<DirectDeclarator> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<DirectDeclarator> dd = (Located<DirectDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>> tl = (Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dd.loc(), loc,
            new DirectDeclaratorFuncTypes(dd, fst(tl), snd(tl))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",23, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // direct_declarator ::= direct_declarator LPAREN identifier_list RPAREN 
            {
              Located<DirectDeclarator> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<DirectDeclarator> dd = (Located<DirectDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<TokId>> il = (Seq<Located<TokId>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dd.loc(), loc,
            new DirectDeclaratorIdsList(dd, il)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",23, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // direct_declarator ::= direct_declarator LPAREN RPAREN 
            {
              Located<DirectDeclarator> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<DirectDeclarator> dd = (Located<DirectDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dd.loc(), loc,
            new DirectDeclaratorIdsList(dd, JavaUtils.seq())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",23, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pointer ::= STAR type_qualifier_list pointer 
            {
              Located<Pointer> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int qsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int qsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<TypeQualifier>> qs = (Seq<Located<TypeQualifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Pointer> ptr = (Located<Pointer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc,      ptr.loc(), new Pointer(qs, some(ptr))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("pointer",18, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pointer ::= STAR type_qualifier_list 
            {
              Located<Pointer> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int qsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int qsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<TypeQualifier>> qs = (Seq<Located<TypeQualifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc, head(qs).loc(), new Pointer(qs, none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("pointer",18, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pointer ::= STAR pointer 
            {
              Located<Pointer> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Pointer> ptr = (Located<Pointer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc, ptr.loc(),
            new Pointer(JavaUtils.seq(), some(ptr))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("pointer",18, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pointer ::= STAR 
            {
              Located<Pointer> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc, new Pointer(JavaUtils.seq(), none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("pointer",18, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_qualifier_list ::= type_qualifier_list type_qualifier 
            {
              Seq<Located<TypeQualifier>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<TypeQualifier>> xs = (Seq<Located<TypeQualifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeQualifier> x = (Located<TypeQualifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier_list",35, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_qualifier_list ::= type_qualifier 
            {
              Seq<Located<TypeQualifier>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeQualifier> x = (Located<TypeQualifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier_list",35, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter_type_list ::= parameter_list 
            {
              Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<ParamDeclaration>> xs = (Seq<Located<ParamDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(xs, none()); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("parameter_type_list",26, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter_type_list ::= parameter_list COMMA ELLIPSIS 
            {
              Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<ParamDeclaration>> xs = (Seq<Located<ParamDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(xs, some(loc)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("parameter_type_list",26, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter_list ::= parameter_declaration 
            {
              Seq<Located<ParamDeclaration>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<ParamDeclaration> x = (Located<ParamDeclaration>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter_list ::= parameter_list COMMA parameter_declaration 
            {
              Seq<Located<ParamDeclaration>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<ParamDeclaration>> xs = (Seq<Located<ParamDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<ParamDeclaration> x = (Located<ParamDeclaration>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter_declaration ::= declaration_specifiers declarator 
            {
              Located<ParamDeclaration> RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declarator> d = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(head(dss).loc(), d.loc(),
            new ParamDeclarationNamed(dss, d)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",28, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter_declaration ::= declaration_specifiers abstract_declarator 
            {
              Located<ParamDeclaration> RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<AbstractDeclarator> ad = (Located<AbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(head(dss).loc(), ad.loc(),
            new ParamDeclarationTypeOnly(dss, ad)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",28, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameter_declaration ::= declaration_specifiers 
            {
              Located<ParamDeclaration> RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<DeclarationSpecifier>> dss = (Seq<Located<DeclarationSpecifier>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(head(dss).loc(),
            new ParamDeclarationTypeOnlySimple(dss)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",28, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identifier_list ::= identifier_list COMMA ID 
            {
              Seq<Located<TokId>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<TokId>> xs = (Seq<Located<TokId>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> x = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",19, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // identifier_list ::= ID 
            {
              Seq<Located<TokId>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> x = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",19, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // compound_statement ::= LBRACE declaration_list statement_list RBRACE 
            {
              Located<CompoundStmt> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc l1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<Declaration>> x = (Seq<Located<Declaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Stmt>> y = (Seq<Located<Stmt>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(l1, l2, new CompoundStmt(    x,     y)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // compound_statement ::= LBRACE declaration_list RBRACE 
            {
              Located<CompoundStmt> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc l1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Declaration>> x = (Seq<Located<Declaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(l1, l2, new CompoundStmt(    x, seq())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // compound_statement ::= LBRACE statement_list RBRACE 
            {
              Located<CompoundStmt> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc l1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Stmt>> y = (Seq<Located<Stmt>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(l1, l2, new CompoundStmt(seq(),     y)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // compound_statement ::= LBRACE RBRACE 
            {
              Located<CompoundStmt> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc l1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(l1, l2, new CompoundStmt(seq(), seq())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration_list ::= declaration 
            {
              Seq<Located<Declaration>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declaration> x = (Located<Declaration>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",12, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration_list ::= declaration_list declaration 
            {
              Seq<Located<Declaration>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Declaration>> xs = (Seq<Located<Declaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declaration> x = (Located<Declaration>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",12, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement_list ::= statement 
            {
              Seq<Located<Stmt>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> x = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement_list ::= statement_list statement 
            {
              Seq<Located<Stmt>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Stmt>> xs = (Seq<Located<Stmt>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> x = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // storage_class_specifier ::= TYPEDEF 
            {
              Located<StorageClassSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc,  c4.ast.Typedef$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",21, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // storage_class_specifier ::= EXTERN 
            {
              Located<StorageClassSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc,   c4.ast.Extern$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",21, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // storage_class_specifier ::= STATIC 
            {
              Located<StorageClassSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc,   c4.ast.Static$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",21, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // storage_class_specifier ::= AUTO 
            {
              Located<StorageClassSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc,     c4.ast.Auto$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",21, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // storage_class_specifier ::= REGISTER 
            {
              Located<StorageClassSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(loc, c4.ast.Register$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("storage_class_specifier",21, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_specifier ::= VOID 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,     c4.ast.Void$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_specifier ::= CHAR 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,     c4.ast.Char$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_specifier ::= SHORT 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,    c4.ast.Short$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_specifier ::= INT 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,      c4.ast.Int$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type_specifier ::= LONG 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,     c4.ast.Long$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type_specifier ::= FLOAT 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,    c4.ast.Float$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type_specifier ::= DOUBLE 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,   c4.ast.Double$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type_specifier ::= SIGNED 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,   c4.ast.Signed$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type_specifier ::= UNSIGNED 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc, c4.ast.Unsigned$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type_specifier ::= struct_or_union_specifier 
            {
              Located<TypeSpecifier> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeSpecifier> x = (Located<TypeSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type_specifier ::= enum_specifier 
            {
              Located<TypeSpecifier> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeSpecifier> x = (Located<TypeSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_specifier ::= TYPEDEF_NAME 
            {
              Located<TypeSpecifier> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> x = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new TypedefName(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",37, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_or_union_specifier ::= STRUCT ID LBRACE struct_declaration_list RBRACE 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<StructDeclaration>> body = (Seq<Located<StructDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int loc2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int loc2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located$.MODULE$.of(loc1, loc2,
            new StructSpecifier(some(id), some(body))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",39, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struct_or_union_specifier ::= STRUCT LBRACE struct_declaration_list RBRACE 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<StructDeclaration>> body = (Seq<Located<StructDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int loc2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int loc2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located$.MODULE$.of(loc1, loc2,
            new StructSpecifier(  none(), some(body))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",39, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struct_or_union_specifier ::= STRUCT ID 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located$.MODULE$.of(loc1, id.loc(),
            new StructSpecifier(some(id),     none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",39, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // struct_or_union_specifier ::= UNION ID LBRACE struct_declaration_list RBRACE 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<StructDeclaration>> body = (Seq<Located<StructDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int loc2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int loc2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located$.MODULE$.of(loc1, loc2,
            new UnionSpecifier(some(id), some(body))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",39, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // struct_or_union_specifier ::= UNION LBRACE struct_declaration_list RBRACE 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<StructDeclaration>> body = (Seq<Located<StructDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int loc2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int loc2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located$.MODULE$.of(loc1, loc2,
            new UnionSpecifier(  none(), some(body))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",39, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // struct_or_union_specifier ::= UNION ID 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located$.MODULE$.of(loc1, id.loc(),
            new UnionSpecifier(some(id),     none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_specifier",39, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // struct_declaration_list ::= struct_declaration 
            {
              Seq<Located<StructDeclaration>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<StructDeclaration> x = (Located<StructDeclaration>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration_list",31, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struct_declaration_list ::= struct_declaration_list struct_declaration 
            {
              Seq<Located<StructDeclaration>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<StructDeclaration>> xs = (Seq<Located<StructDeclaration>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<StructDeclaration> x = (Located<StructDeclaration>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration_list",31, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMICOLON 
            {
              Located<StructDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<Either<TypeSpecifier,TypeQualifier>>> a = (Seq<Located<Either<TypeSpecifier,TypeQualifier>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>> b = (Seq<Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc c = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = StructDeclaration$.MODULE$.ofLoc(a, b, c); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",32, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // specifier_qualifier_list ::= type_specifier specifier_qualifier_list 
            {
              Seq<Located<Either<TypeSpecifier,TypeQualifier>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<TypeSpecifier> x = (Located<TypeSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<Either<TypeSpecifier,TypeQualifier>>> xs = (Seq<Located<Either<TypeSpecifier,TypeQualifier>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		
          RESULT = JavaUtils.prepend(
            new Located(x.loc(), left(x.value())),
            xs);
        
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",36, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // specifier_qualifier_list ::= type_specifier 
            {
              Seq<Located<Either<TypeSpecifier,TypeQualifier>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeSpecifier> x = (Located<TypeSpecifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(new Located(x.loc(), left(x.value()))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",36, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // specifier_qualifier_list ::= type_qualifier specifier_qualifier_list 
            {
              Seq<Located<Either<TypeSpecifier,TypeQualifier>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<TypeQualifier> x = (Located<TypeQualifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<Either<TypeSpecifier,TypeQualifier>>> xs = (Seq<Located<Either<TypeSpecifier,TypeQualifier>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		
          RESULT = JavaUtils.prepend(
            new Located(x.loc(), right(x.value())),
            xs);
        
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",36, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // specifier_qualifier_list ::= type_qualifier 
            {
              Seq<Located<Either<TypeSpecifier,TypeQualifier>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TypeQualifier> x = (Located<TypeQualifier>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(new Located(x.loc(), right(x.value()))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",36, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struct_declarator_list ::= struct_declarator_list COMMA struct_declarator 
            {
              Seq<Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>> xs = (Seq<Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>> x = (Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",33, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // struct_declarator_list ::= struct_declarator 
            {
              Seq<Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>> x = (Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",33, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struct_declarator ::= declarator 
            {
              Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Declarator> x = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(some(x), none()); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",34, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // struct_declarator ::= declarator COLON constant_expression 
            {
              Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Declarator> x = (Located<Declarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(some(x), some(e)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",34, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // struct_declarator ::= COLON constant_expression 
            {
              Tuple2<Option<Located<Declarator>>,Option<Located<Expr>>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(none(), some(e)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",34, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // enum_specifier ::= ENUM ID LBRACE enumerator_list RBRACE 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>> body = (Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int loc2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int loc2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		
          RESULT = new Located(
            LocRange.of(loc1, loc2),
            new EnumSpecifier(some(id), some(body)));
        
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",38, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // enum_specifier ::= ENUM LBRACE enumerator_list RBRACE 
            {
              Located<TypeSpecifier> RESULT =null;
		int loc1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int loc1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc loc1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>> body = (Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int loc2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int loc2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		
          RESULT = new Located(
            LocRange.of(loc1, loc2),
            new EnumSpecifier(none(), some(body)));
        
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",38, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // enum_specifier ::= ENUM ID 
            {
              Located<TypeSpecifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		
          RESULT = new Located(
            LocRange.of(loc, id.loc()),
            new EnumSpecifier(some(id), none()));
        
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("enum_specifier",38, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // enumerator_list ::= enumerator 
            {
              Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Tuple2<Located<TokId>,Option<Located<Expr>>> x = (Tuple2<Located<TokId>,Option<Located<Expr>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("enumerator_list",29, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // enumerator_list ::= enumerator_list COMMA enumerator 
            {
              Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>> xs = (Seq<Tuple2<Located<TokId>,Option<Located<Expr>>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Tuple2<Located<TokId>,Option<Located<Expr>>> x = (Tuple2<Located<TokId>,Option<Located<Expr>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("enumerator_list",29, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // enumerator ::= ID 
            {
              Tuple2<Located<TokId>,Option<Located<Expr>>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(id, none()); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("enumerator",30, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // enumerator ::= ID ASSIGN constant_expression 
            {
              Tuple2<Located<TokId>,Option<Located<Expr>>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = pair(id, some(e)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("enumerator",30, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type_qualifier ::= CONST 
            {
              Located<TypeQualifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc,    c4.ast.Const$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier",40, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type_qualifier ::= VOLATILE 
            {
              Located<TypeQualifier> RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc loc = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(loc, c4.ast.Volatile$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_qualifier",40, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // initializer ::= assignment_expression 
            {
              Located<Initializer> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), new InitializerExpr(e)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("initializer",17, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // initializer ::= LBRACE initializer_list RBRACE 
            {
              Located<Initializer> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc l1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Initializer>> il = (Seq<Located<Initializer>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(l1, l2, new InitializerStruct(il)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("initializer",17, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // initializer ::= LBRACE initializer_list COMMA RBRACE 
            {
              Located<Initializer> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc l1 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<Initializer>> il = (Seq<Located<Initializer>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc l2 = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(l1, l2, new InitializerStruct(il)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("initializer",17, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // initializer_list ::= initializer 
            {
              Seq<Located<Initializer>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Initializer> x = (Located<Initializer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",16, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // initializer_list ::= initializer_list COMMA initializer 
            {
              Seq<Located<Initializer>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<Initializer>> xs = (Seq<Located<Initializer>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Initializer> x = (Located<Initializer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",16, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type_name ::= specifier_qualifier_list abstract_declarator 
            {
              Located<TypeName> RESULT =null;
		int sqsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int sqsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Either<TypeSpecifier,TypeQualifier>>> sqs = (Seq<Located<Either<TypeSpecifier,TypeQualifier>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<AbstractDeclarator> ad = (Located<AbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(head(sqs).loc(), ad.loc(),
            new TypeName(sqs, some(ad))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_name",0, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type_name ::= specifier_qualifier_list 
            {
              Located<TypeName> RESULT =null;
		int sqsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sqsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Seq<Located<Either<TypeSpecifier,TypeQualifier>>> sqs = (Seq<Located<Either<TypeSpecifier,TypeQualifier>>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(head(sqs).loc(),
            new TypeName(sqs, none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("type_name",0, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // abstract_declarator ::= pointer 
            {
              Located<AbstractDeclarator> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Pointer> ptr = (Located<Pointer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(ptr.loc(),
            new AbstractDeclarator(some(ptr), none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",24, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // abstract_declarator ::= pointer direct_abstract_declarator 
            {
              Located<AbstractDeclarator> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Pointer> ptr = (Located<Pointer>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int dadleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<DirectAbstractDeclarator> dad = (Located<DirectAbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(ptr.loc(), dad.loc(),
            new AbstractDeclarator(some(ptr), some(dad))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",24, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // abstract_declarator ::= direct_abstract_declarator 
            {
              Located<AbstractDeclarator> RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<DirectAbstractDeclarator> dad = (Located<DirectAbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dad.loc(),
            new AbstractDeclarator(none(), some(dad))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",24, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // direct_abstract_declarator ::= LPAREN abstract_declarator RPAREN 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<AbstractDeclarator> ad = (Located<AbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc e = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e, new DirectAbstractDeclaratorSimple(ad)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // direct_abstract_declarator ::= direct_abstract_declarator LSBRKT constant_expression RSBRKT 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<DirectAbstractDeclarator> dad = (Located<DirectAbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dad.loc(), end,
            new DirectAbstractDeclaratorArray(some(dad), some(e))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // direct_abstract_declarator ::= direct_abstract_declarator LSBRKT RSBRKT 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<DirectAbstractDeclarator> dad = (Located<DirectAbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dad.loc(), end,
            new DirectAbstractDeclaratorArray(some(dad), none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // direct_abstract_declarator ::= LSBRKT constant_expression RSBRKT 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, end,
            new DirectAbstractDeclaratorArray(none(), some(e))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // direct_abstract_declarator ::= LSBRKT RSBRKT 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, end,
            new DirectAbstractDeclaratorArray(none(), none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // direct_abstract_declarator ::= direct_abstract_declarator LPAREN parameter_type_list RPAREN 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<DirectAbstractDeclarator> dad = (Located<DirectAbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>> p = (Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dad.loc(), end,
            new DirectAbstractDeclaratorFunc(some(dad), some(p))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // direct_abstract_declarator ::= direct_abstract_declarator LPAREN RPAREN 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<DirectAbstractDeclarator> dad = (Located<DirectAbstractDeclarator>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(dad.loc(), end,
            new DirectAbstractDeclaratorFunc(some(dad), none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // direct_abstract_declarator ::= LPAREN parameter_type_list RPAREN 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>> p = (Tuple2<Seq<Located<ParamDeclaration>>,Option<Loc>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, end,
            new DirectAbstractDeclaratorFunc(none(), some(p))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // direct_abstract_declarator ::= LPAREN RPAREN 
            {
              Located<DirectAbstractDeclarator> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, end,
            new DirectAbstractDeclaratorFunc(none(), none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",25, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement ::= labeled_statement 
            {
              Located<Stmt> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> x = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$4 ::= 
            {
              Located<Stmt> RESULT =null;
 getC4Scanner().enterScope(); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("NT$4",65, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // statement ::= NT$4 compound_statement 
            {
              Located<Stmt> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Located<Stmt>) ((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<CompoundStmt> x = (Located<CompoundStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 getC4Scanner().exitScope();
           RESULT = Located.of(x.loc(), x.value()); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // statement ::= expression_statement 
            {
              Located<Stmt> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<ExprStmt> x = (Located<ExprStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x.loc(), x.value()); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // statement ::= selection_statement 
            {
              Located<Stmt> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> x = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // statement ::= iteration_statement 
            {
              Located<Stmt> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> x = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // statement ::= jump_statement 
            {
              Located<Stmt> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> x = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // labeled_statement ::= ID COLON statement 
            {
              Located<Stmt> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(id.loc(), s.loc(), new LabeledStmtId(id, s)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",3, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // labeled_statement ::= CASE constant_expression COLON statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s.loc(), new LabeledStmtCase(e, s)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",3, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // labeled_statement ::= DEFAULT COLON statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s.loc(), new LabeledStmtDefault(s)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",3, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_statement ::= expression SEMICOLON 
            {
              Located<ExprStmt> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), end, new ExprStmt(some(e))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",7, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_statement ::= SEMICOLON 
            {
              Located<ExprStmt> RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(end, new ExprStmt(none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",7, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // selection_statement ::= IF LPAREN expression RPAREN statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s1 = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s1.loc(), new IfStmt(e, s1, none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",4, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Stmt> s1 = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s2 = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s2.loc(), new IfStmt(e, s1, some(s2))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",4, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // selection_statement ::= SWITCH LPAREN expression RPAREN statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s.loc(), new SwitchStmt(e, s)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",4, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // iteration_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s.loc(), new WhileStmt(e, s)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",5, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-5)).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> expr = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, end, new DoWhileStmt(s, expr)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",5, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Located<ExprStmt> e1 = (Located<ExprStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<ExprStmt> e2 = (Located<ExprStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e3 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s.loc(),
            new ForStmt(e1.value().e(), e2.value().e(), some(e3), s)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",5, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-6)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-5)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<ExprStmt> e1 = (Located<ExprStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<ExprStmt> e2 = (Located<ExprStmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Stmt> s = (Located<Stmt>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, s.loc(),
            new ForStmt(e1.value().e(), e2.value().e(), none(), s)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",5, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-5)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // jump_statement ::= GOTO ID SEMICOLON 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc e = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e, new GotoStmt(id)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",6, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // jump_statement ::= CONTINUE SEMICOLON 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc e = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e, c4.ast.Continue$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",6, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // jump_statement ::= BREAK SEMICOLON 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc e = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e, c4.ast.Break$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",6, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // jump_statement ::= RETURN expression SEMICOLON 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> expr = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc e = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e, new Return(some(expr))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",6, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // jump_statement ::= RETURN SEMICOLON 
            {
              Located<Stmt> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc e = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e, new Return(none())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",6, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression ::= assignment_expression 
            {
              Located<Expr> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression ::= expression COMMA assignment_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc c = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2, Located.of(c, c4.ast.Comma$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // constant_expression ::= conditional_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",42, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // assignment_expression ::= conditional_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",43, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<BinaryOp> op = (Located<BinaryOp>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2, op)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",43, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // conditional_expression ::= logical_or_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",44, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // conditional_expression ::= logical_or_expression QMARK expression COLON conditional_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e3 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e3.loc(),
            new TernaryExpr(e1, e2, e3)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",44, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logical_or_expression ::= logical_and_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",45, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // logical_or_expression ::= logical_or_expression L_OR logical_and_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.LogicOr$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",45, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // logical_and_expression ::= inclusive_or_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",46, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // logical_and_expression ::= logical_and_expression L_AND inclusive_or_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.LogicAnd$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",46, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",47, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // inclusive_or_expression ::= inclusive_or_expression B_OR exclusive_or_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.BitOr$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",47, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // exclusive_or_expression ::= and_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",48, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Xor$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",48, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // and_expression ::= equality_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("and_expression",49, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // and_expression ::= and_expression B_AND equality_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.BitAnd$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("and_expression",49, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // equality_expression ::= relational_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",50, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // equality_expression ::= equality_expression EQ relational_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Eq$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",50, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // equality_expression ::= equality_expression NEQ relational_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Neq$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",50, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // relational_expression ::= shift_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",51, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // relational_expression ::= relational_expression LE shift_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Less$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",51, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // relational_expression ::= relational_expression GT shift_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Gt$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",51, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // relational_expression ::= relational_expression LEQ shift_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Leq$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",51, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // relational_expression ::= relational_expression GEQ shift_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Geq$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",51, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // shift_expression ::= additive_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",52, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.LShift$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",52, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.RShift$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",52, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // additive_expression ::= multiplicative_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",53, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // additive_expression ::= additive_expression ADD multiplicative_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Add$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",53, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // additive_expression ::= additive_expression SUB multiplicative_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Sub$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",53, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // multiplicative_expression ::= cast_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",54, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // multiplicative_expression ::= multiplicative_expression STAR cast_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Mul$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",54, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // multiplicative_expression ::= multiplicative_expression DIV cast_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Div$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",54, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // multiplicative_expression ::= multiplicative_expression MOD cast_expression 
            {
              Located<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e1 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e2 = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e1.loc(), e2.loc(),
            new BinaryExpr(e1, e2,
                Located.of(op, c4.ast.Mod$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",54, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // assignment_operator ::= ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.Assign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // assignment_operator ::= MUL_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.MulAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // assignment_operator ::= DIV_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.DivAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // assignment_operator ::= MOD_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.ModAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // assignment_operator ::= ADD_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.AddAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // assignment_operator ::= SUB_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.SubAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // assignment_operator ::= LSHIFT_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.LShiftAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // assignment_operator ::= RSHIFT_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.RShiftAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // assignment_operator ::= B_AND_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.BinaryAndAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // assignment_operator ::= XOR_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.XorAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // assignment_operator ::= B_OR_ASSIGN 
            {
              Located<BinaryOp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc x = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(x, c4.ast.BinaryOrAssign$.MODULE$); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",60, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // unary_expression ::= postfix_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unary_expression ::= INC unary_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.PrefixInc$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // unary_expression ::= DEC unary_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.PrefixDec$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // unary_expression ::= B_AND cast_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.Ref$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // unary_expression ::= STAR cast_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.Deref$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // unary_expression ::= ADD cast_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.Pos$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // unary_expression ::= SUB cast_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.Neg$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // unary_expression ::= TILDE cast_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.BitNot$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // unary_expression ::= L_NOT cast_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(),
            new UnaryExpr(e, Located.of(op, c4.ast.LogicNot$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // unary_expression ::= SIZEOF unary_expression 
            {
              Located<Expr> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(op, e.loc(), new SizeofValExpr(e)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Located<Expr> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<TypeName> tp = (Located<TypeName>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc e = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e, new SizeofTypeExpr(tp)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",55, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // postfix_expression ::= primary_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // postfix_expression ::= postfix_expression LSBRKT expression RSBRKT 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> sub = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), end, new ArrSubExpr(e, sub)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Seq<Located<Expr>> args = (Seq<Located<Expr>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), end, new FunCallExpr(e, args)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // postfix_expression ::= postfix_expression LPAREN RPAREN 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc end = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), end, new FunCallExpr(e, seq())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // postfix_expression ::= postfix_expression DOT ID 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), id.loc(), new DotExpr(e, id)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // postfix_expression ::= postfix_expression PTR ID 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), id.loc(), new PtrExpr(e, id)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // postfix_expression ::= postfix_expression INC 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), op,
            new UnaryExpr(e, Located.of(op, c4.ast.PostfixInc$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // postfix_expression ::= postfix_expression DEC 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Loc op = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(e.loc(), op,
            new UnaryExpr(e, Located.of(op, c4.ast.PostfixDec$.MODULE$))); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",56, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // argument_expression_list ::= assignment_expression 
            {
              Seq<Located<Expr>> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> x = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.seq(x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("argument_expression_list",59, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // argument_expression_list ::= argument_expression_list COMMA assignment_expression 
            {
              Seq<Located<Expr>> RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Seq<Located<Expr>> xs = (Seq<Located<Expr>>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> x = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = JavaUtils.append(xs, x); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("argument_expression_list",59, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // cast_expression ::= unary_expression 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",57, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              Located<Expr> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).right;
		Loc b = (Loc)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).right;
		Located<TypeName> tn = (Located<TypeName>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = Located.of(b, e.loc(), new CastExpr(tn, e)); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",57, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // primary_expression ::= ID 
            {
              Located<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokId> id = (Located<TokId>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(id.loc(), new Id(id.value().id())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // primary_expression ::= INTEGER_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokInteger> x = (Located<TokInteger>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new IntegerLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // primary_expression ::= FLOAT_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokFloat> x = (Located<TokFloat>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new FloatLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // primary_expression ::= DOUBLE_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokDouble> x = (Located<TokDouble>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new DoubleLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // primary_expression ::= LONG_DOUBLE_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokLongDouble> x = (Located<TokLongDouble>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new LongDoubleLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // primary_expression ::= CHAR_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokChar> x = (Located<TokChar>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new CharLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // primary_expression ::= WIDE_CHAR_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokWideChar> x = (Located<TokWideChar>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new WideCharLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // primary_expression ::= STR_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokStr> x = (Located<TokStr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new StrLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // primary_expression ::= WIDE_STR_LIT 
            {
              Located<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()).right;
		Located<TokWideStr> x = (Located<TokWideStr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.peek()).value;
		 RESULT = new Located(x.loc(), new WideStrLit(x.value())); 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // primary_expression ::= LPAREN expression RPAREN 
            {
              Located<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).right;
		Located<Expr> e = (Located<Expr>)((java_cup.runtime.Symbol) CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-1)).value;
		 RESULT = e; 
              CUP$C4Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",58, ((java_cup.runtime.Symbol)CUP$C4Parser$stack.elementAt(CUP$C4Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C4Parser$stack.peek()), RESULT);
            }
          return CUP$C4Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$C4Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$C4Parser$do_action(
    int                        CUP$C4Parser$act_num,
    java_cup.runtime.lr_parser CUP$C4Parser$parser,
    java.util.Stack            CUP$C4Parser$stack,
    int                        CUP$C4Parser$top)
    throws java.lang.Exception
    {
              return CUP$C4Parser$do_action_part00000000(
                               CUP$C4Parser$act_num,
                               CUP$C4Parser$parser,
                               CUP$C4Parser$stack,
                               CUP$C4Parser$top);
    }
}

}
